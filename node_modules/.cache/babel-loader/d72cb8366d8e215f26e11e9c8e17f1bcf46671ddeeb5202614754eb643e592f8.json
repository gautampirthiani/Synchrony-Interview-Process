{"ast":null,"code":"/**\n * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You\n * may not use this file except in compliance with the License. A copy of\n * the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\nvar AWS = require('./core');\nvar inherit = AWS.util.inherit;\nvar jmespath = require('jmespath');\n\n/**\n * @api private\n */\nfunction CHECK_ACCEPTORS(resp) {\n  var waiter = resp.request._waiter;\n  var acceptors = waiter.config.acceptors;\n  var acceptorMatched = false;\n  var state = 'retry';\n  acceptors.forEach(function (acceptor) {\n    if (!acceptorMatched) {\n      var matcher = waiter.matchers[acceptor.matcher];\n      if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {\n        acceptorMatched = true;\n        state = acceptor.state;\n      }\n    }\n  });\n  if (!acceptorMatched && resp.error) state = 'failure';\n  if (state === 'success') {\n    waiter.setSuccess(resp);\n  } else {\n    waiter.setError(resp, state === 'retry');\n  }\n}\n\n/**\n * @api private\n */\nAWS.ResourceWaiter = inherit({\n  /**\n   * Waits for a given state on a service object\n   * @param service [Service] the service object to wait on\n   * @param state [String] the state (defined in waiter configuration) to wait\n   *   for.\n   * @example Create a waiter for running EC2 instances\n   *   var ec2 = new AWS.EC2;\n   *   var waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');\n   */\n  constructor: function constructor(service, state) {\n    this.service = service;\n    this.state = state;\n    this.loadWaiterConfig(this.state);\n  },\n  service: null,\n  state: null,\n  config: null,\n  matchers: {\n    path: function (resp, expected, argument) {\n      try {\n        var result = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n      return jmespath.strictDeepEqual(result, expected);\n    },\n    pathAll: function (resp, expected, argument) {\n      try {\n        var results = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n      if (!Array.isArray(results)) results = [results];\n      var numResults = results.length;\n      if (!numResults) return false;\n      for (var ind = 0; ind < numResults; ind++) {\n        if (!jmespath.strictDeepEqual(results[ind], expected)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    pathAny: function (resp, expected, argument) {\n      try {\n        var results = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n      if (!Array.isArray(results)) results = [results];\n      var numResults = results.length;\n      for (var ind = 0; ind < numResults; ind++) {\n        if (jmespath.strictDeepEqual(results[ind], expected)) {\n          return true;\n        }\n      }\n      return false;\n    },\n    status: function (resp, expected) {\n      var statusCode = resp.httpResponse.statusCode;\n      return typeof statusCode === 'number' && statusCode === expected;\n    },\n    error: function (resp, expected) {\n      if (typeof expected === 'string' && resp.error) {\n        return expected === resp.error.code;\n      }\n      // if expected is not string, can be boolean indicating presence of error\n      return expected === !!resp.error;\n    }\n  },\n  listeners: new AWS.SequentialExecutor().addNamedListeners(function (add) {\n    add('RETRY_CHECK', 'retry', function (resp) {\n      var waiter = resp.request._waiter;\n      if (resp.error && resp.error.code === 'ResourceNotReady') {\n        resp.error.retryDelay = (waiter.config.delay || 0) * 1000;\n      }\n    });\n    add('CHECK_OUTPUT', 'extractData', CHECK_ACCEPTORS);\n    add('CHECK_ERROR', 'extractError', CHECK_ACCEPTORS);\n  }),\n  /**\n   * @return [AWS.Request]\n   */\n  wait: function wait(params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = undefined;\n    }\n    if (params && params.$waiter) {\n      params = AWS.util.copy(params);\n      if (typeof params.$waiter.delay === 'number') {\n        this.config.delay = params.$waiter.delay;\n      }\n      if (typeof params.$waiter.maxAttempts === 'number') {\n        this.config.maxAttempts = params.$waiter.maxAttempts;\n      }\n      delete params.$waiter;\n    }\n    var request = this.service.makeRequest(this.config.operation, params);\n    request._waiter = this;\n    request.response.maxRetries = this.config.maxAttempts;\n    request.addListeners(this.listeners);\n    if (callback) request.send(callback);\n    return request;\n  },\n  setSuccess: function setSuccess(resp) {\n    resp.error = null;\n    resp.data = resp.data || {};\n    resp.request.removeAllListeners('extractData');\n  },\n  setError: function setError(resp, retryable) {\n    resp.data = null;\n    resp.error = AWS.util.error(resp.error || new Error(), {\n      code: 'ResourceNotReady',\n      message: 'Resource is not in the state ' + this.state,\n      retryable: retryable\n    });\n  },\n  /**\n   * Loads waiter configuration from API configuration\n   *\n   * @api private\n   */\n  loadWaiterConfig: function loadWaiterConfig(state) {\n    if (!this.service.api.waiters[state]) {\n      throw new AWS.util.error(new Error(), {\n        code: 'StateNotFoundError',\n        message: 'State ' + state + ' not found.'\n      });\n    }\n    this.config = AWS.util.copy(this.service.api.waiters[state]);\n  }\n});","map":{"version":3,"names":["AWS","require","inherit","util","jmespath","CHECK_ACCEPTORS","resp","waiter","request","_waiter","acceptors","config","acceptorMatched","state","forEach","acceptor","matcher","matchers","expected","argument","error","setSuccess","setError","ResourceWaiter","constructor","service","loadWaiterConfig","path","result","search","data","err","strictDeepEqual","pathAll","results","Array","isArray","numResults","length","ind","pathAny","status","statusCode","httpResponse","code","listeners","SequentialExecutor","addNamedListeners","add","retryDelay","delay","wait","params","callback","undefined","$waiter","copy","maxAttempts","makeRequest","operation","response","maxRetries","addListeners","send","removeAllListeners","retryable","Error","message","api","waiters"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/resource_waiter.js"],"sourcesContent":["/**\n * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You\n * may not use this file except in compliance with the License. A copy of\n * the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\nvar AWS = require('./core');\nvar inherit = AWS.util.inherit;\nvar jmespath = require('jmespath');\n\n/**\n * @api private\n */\nfunction CHECK_ACCEPTORS(resp) {\n  var waiter = resp.request._waiter;\n  var acceptors = waiter.config.acceptors;\n  var acceptorMatched = false;\n  var state = 'retry';\n\n  acceptors.forEach(function(acceptor) {\n    if (!acceptorMatched) {\n      var matcher = waiter.matchers[acceptor.matcher];\n      if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {\n        acceptorMatched = true;\n        state = acceptor.state;\n      }\n    }\n  });\n\n  if (!acceptorMatched && resp.error) state = 'failure';\n\n  if (state === 'success') {\n    waiter.setSuccess(resp);\n  } else {\n    waiter.setError(resp, state === 'retry');\n  }\n}\n\n/**\n * @api private\n */\nAWS.ResourceWaiter = inherit({\n  /**\n   * Waits for a given state on a service object\n   * @param service [Service] the service object to wait on\n   * @param state [String] the state (defined in waiter configuration) to wait\n   *   for.\n   * @example Create a waiter for running EC2 instances\n   *   var ec2 = new AWS.EC2;\n   *   var waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');\n   */\n  constructor: function constructor(service, state) {\n    this.service = service;\n    this.state = state;\n    this.loadWaiterConfig(this.state);\n  },\n\n  service: null,\n\n  state: null,\n\n  config: null,\n\n  matchers: {\n    path: function(resp, expected, argument) {\n      try {\n        var result = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n\n      return jmespath.strictDeepEqual(result,expected);\n    },\n\n    pathAll: function(resp, expected, argument) {\n      try {\n        var results = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n\n      if (!Array.isArray(results)) results = [results];\n      var numResults = results.length;\n      if (!numResults) return false;\n      for (var ind = 0 ; ind < numResults; ind++) {\n        if (!jmespath.strictDeepEqual(results[ind], expected)) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    pathAny: function(resp, expected, argument) {\n      try {\n        var results = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n\n      if (!Array.isArray(results)) results = [results];\n      var numResults = results.length;\n      for (var ind = 0 ; ind < numResults; ind++) {\n        if (jmespath.strictDeepEqual(results[ind], expected)) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    status: function(resp, expected) {\n      var statusCode = resp.httpResponse.statusCode;\n      return (typeof statusCode === 'number') && (statusCode === expected);\n    },\n\n    error: function(resp, expected) {\n      if (typeof expected === 'string' && resp.error) {\n        return expected === resp.error.code;\n      }\n      // if expected is not string, can be boolean indicating presence of error\n      return expected === !!resp.error;\n    }\n  },\n\n  listeners: new AWS.SequentialExecutor().addNamedListeners(function(add) {\n    add('RETRY_CHECK', 'retry', function(resp) {\n      var waiter = resp.request._waiter;\n      if (resp.error && resp.error.code === 'ResourceNotReady') {\n        resp.error.retryDelay = (waiter.config.delay || 0) * 1000;\n      }\n    });\n\n    add('CHECK_OUTPUT', 'extractData', CHECK_ACCEPTORS);\n\n    add('CHECK_ERROR', 'extractError', CHECK_ACCEPTORS);\n  }),\n\n  /**\n   * @return [AWS.Request]\n   */\n  wait: function wait(params, callback) {\n    if (typeof params === 'function') {\n      callback = params; params = undefined;\n    }\n\n    if (params && params.$waiter) {\n      params = AWS.util.copy(params);\n      if (typeof params.$waiter.delay === 'number') {\n        this.config.delay = params.$waiter.delay;\n      }\n      if (typeof params.$waiter.maxAttempts === 'number') {\n        this.config.maxAttempts = params.$waiter.maxAttempts;\n      }\n      delete params.$waiter;\n    }\n\n    var request = this.service.makeRequest(this.config.operation, params);\n    request._waiter = this;\n    request.response.maxRetries = this.config.maxAttempts;\n    request.addListeners(this.listeners);\n\n    if (callback) request.send(callback);\n    return request;\n  },\n\n  setSuccess: function setSuccess(resp) {\n    resp.error = null;\n    resp.data = resp.data || {};\n    resp.request.removeAllListeners('extractData');\n  },\n\n  setError: function setError(resp, retryable) {\n    resp.data = null;\n    resp.error = AWS.util.error(resp.error || new Error(), {\n      code: 'ResourceNotReady',\n      message: 'Resource is not in the state ' + this.state,\n      retryable: retryable\n    });\n  },\n\n  /**\n   * Loads waiter configuration from API configuration\n   *\n   * @api private\n   */\n  loadWaiterConfig: function loadWaiterConfig(state) {\n    if (!this.service.api.waiters[state]) {\n      throw new AWS.util.error(new Error(), {\n        code: 'StateNotFoundError',\n        message: 'State ' + state + ' not found.'\n      });\n    }\n\n    this.config = AWS.util.copy(this.service.api.waiters[state]);\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}