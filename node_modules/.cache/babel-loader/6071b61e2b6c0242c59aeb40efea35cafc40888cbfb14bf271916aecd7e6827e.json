{"ast":null,"code":"var AWS = require('../core');\n\n/**\n * @api private\n */\nvar blobPayloadOutputOps = ['deleteThingShadow', 'getThingShadow', 'updateThingShadow'];\n\n/**\n * Constructs a service interface object. Each API operation is exposed as a\n * function on service.\n *\n * ### Sending a Request Using IotData\n *\n * ```javascript\n * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\n * iotdata.getThingShadow(params, function (err, data) {\n *   if (err) console.log(err, err.stack); // an error occurred\n *   else     console.log(data);           // successful response\n * });\n * ```\n *\n * ### Locking the API Version\n *\n * In order to ensure that the IotData object uses this specific API,\n * you can construct the object by passing the `apiVersion` option to the\n * constructor:\n *\n * ```javascript\n * var iotdata = new AWS.IotData({\n *   endpoint: 'my.host.tld',\n *   apiVersion: '2015-05-28'\n * });\n * ```\n *\n * You can also set the API version globally in `AWS.config.apiVersions` using\n * the **iotdata** service identifier:\n *\n * ```javascript\n * AWS.config.apiVersions = {\n *   iotdata: '2015-05-28',\n *   // other service API versions\n * };\n *\n * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\n * ```\n *\n * @note You *must* provide an `endpoint` configuration parameter when\n *   constructing this service. See {constructor} for more information.\n *\n * @!method constructor(options = {})\n *   Constructs a service object. This object has one method for each\n *   API operation.\n *\n *   @example Constructing a IotData object\n *     var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\n *   @note You *must* provide an `endpoint` when constructing this service.\n *   @option (see AWS.Config.constructor)\n *\n * @service iotdata\n * @version 2015-05-28\n */\nAWS.util.update(AWS.IotData.prototype, {\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n    if (!this.config.endpoint || this.config.endpoint.indexOf('{') >= 0) {\n      var msg = 'AWS.IotData requires an explicit ' + '`endpoint\\' configuration option.';\n      throw AWS.util.error(new Error(), {\n        name: 'InvalidEndpoint',\n        message: msg\n      });\n    }\n  },\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('validateResponse', this.validateResponseBody);\n    if (blobPayloadOutputOps.indexOf(request.operation) > -1) {\n      request.addListener('extractData', AWS.util.convertPayloadToString);\n    }\n  },\n  /**\n   * @api private\n   */\n  validateResponseBody: function validateResponseBody(resp) {\n    var body = resp.httpResponse.body.toString() || '{}';\n    var bodyCheck = body.trim();\n    if (!bodyCheck || bodyCheck.charAt(0) !== '{') {\n      resp.httpResponse.body = '';\n    }\n  }\n});","map":{"version":3,"names":["AWS","require","blobPayloadOutputOps","util","update","IotData","prototype","validateService","config","endpoint","indexOf","msg","error","Error","name","message","setupRequestListeners","request","addListener","validateResponseBody","operation","convertPayloadToString","resp","body","httpResponse","toString","bodyCheck","trim","charAt"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/services/iotdata.js"],"sourcesContent":["var AWS = require('../core');\n\n/**\n * @api private\n */\nvar blobPayloadOutputOps = [\n  'deleteThingShadow',\n  'getThingShadow',\n  'updateThingShadow'\n];\n\n/**\n * Constructs a service interface object. Each API operation is exposed as a\n * function on service.\n *\n * ### Sending a Request Using IotData\n *\n * ```javascript\n * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\n * iotdata.getThingShadow(params, function (err, data) {\n *   if (err) console.log(err, err.stack); // an error occurred\n *   else     console.log(data);           // successful response\n * });\n * ```\n *\n * ### Locking the API Version\n *\n * In order to ensure that the IotData object uses this specific API,\n * you can construct the object by passing the `apiVersion` option to the\n * constructor:\n *\n * ```javascript\n * var iotdata = new AWS.IotData({\n *   endpoint: 'my.host.tld',\n *   apiVersion: '2015-05-28'\n * });\n * ```\n *\n * You can also set the API version globally in `AWS.config.apiVersions` using\n * the **iotdata** service identifier:\n *\n * ```javascript\n * AWS.config.apiVersions = {\n *   iotdata: '2015-05-28',\n *   // other service API versions\n * };\n *\n * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\n * ```\n *\n * @note You *must* provide an `endpoint` configuration parameter when\n *   constructing this service. See {constructor} for more information.\n *\n * @!method constructor(options = {})\n *   Constructs a service object. This object has one method for each\n *   API operation.\n *\n *   @example Constructing a IotData object\n *     var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\n *   @note You *must* provide an `endpoint` when constructing this service.\n *   @option (see AWS.Config.constructor)\n *\n * @service iotdata\n * @version 2015-05-28\n */\nAWS.util.update(AWS.IotData.prototype, {\n    /**\n     * @api private\n     */\n    validateService: function validateService() {\n        if (!this.config.endpoint || this.config.endpoint.indexOf('{') >= 0) {\n            var msg = 'AWS.IotData requires an explicit ' +\n                '`endpoint\\' configuration option.';\n            throw AWS.util.error(new Error(),\n                {name: 'InvalidEndpoint', message: msg});\n        }\n    },\n\n    /**\n     * @api private\n     */\n    setupRequestListeners: function setupRequestListeners(request) {\n        request.addListener('validateResponse', this.validateResponseBody);\n        if (blobPayloadOutputOps.indexOf(request.operation) > -1) {\n            request.addListener('extractData', AWS.util.convertPayloadToString);\n        }\n    },\n\n    /**\n     * @api private\n     */\n    validateResponseBody: function validateResponseBody(resp) {\n        var body = resp.httpResponse.body.toString() || '{}';\n        var bodyCheck = body.trim();\n        if (!bodyCheck || bodyCheck.charAt(0) !== '{') {\n            resp.httpResponse.body = '';\n        }\n    }\n\n});\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAE5B;AACA;AACA;AACA,IAAIC,oBAAoB,GAAG,CACzB,mBAAmB,EACnB,gBAAgB,EAChB,mBAAmB,CACpB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,GAAG,CAACG,IAAI,CAACC,MAAM,CAACJ,GAAG,CAACK,OAAO,CAACC,SAAS,EAAE;EACnC;AACJ;AACA;EACIC,eAAe,EAAE,SAASA,eAAeA,CAAA,EAAG;IACxC,IAAI,CAAC,IAAI,CAACC,MAAM,CAACC,QAAQ,IAAI,IAAI,CAACD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;MACjE,IAAIC,GAAG,GAAG,mCAAmC,GACzC,mCAAmC;MACvC,MAAMX,GAAG,CAACG,IAAI,CAACS,KAAK,CAAC,IAAIC,KAAK,CAAC,CAAC,EAC5B;QAACC,IAAI,EAAE,iBAAiB;QAAEC,OAAO,EAAEJ;MAAG,CAAC,CAAC;IAChD;EACJ,CAAC;EAED;AACJ;AACA;EACIK,qBAAqB,EAAE,SAASA,qBAAqBA,CAACC,OAAO,EAAE;IAC3DA,OAAO,CAACC,WAAW,CAAC,kBAAkB,EAAE,IAAI,CAACC,oBAAoB,CAAC;IAClE,IAAIjB,oBAAoB,CAACQ,OAAO,CAACO,OAAO,CAACG,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE;MACtDH,OAAO,CAACC,WAAW,CAAC,aAAa,EAAElB,GAAG,CAACG,IAAI,CAACkB,sBAAsB,CAAC;IACvE;EACJ,CAAC;EAED;AACJ;AACA;EACIF,oBAAoB,EAAE,SAASA,oBAAoBA,CAACG,IAAI,EAAE;IACtD,IAAIC,IAAI,GAAGD,IAAI,CAACE,YAAY,CAACD,IAAI,CAACE,QAAQ,CAAC,CAAC,IAAI,IAAI;IACpD,IAAIC,SAAS,GAAGH,IAAI,CAACI,IAAI,CAAC,CAAC;IAC3B,IAAI,CAACD,SAAS,IAAIA,SAAS,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAC3CN,IAAI,CAACE,YAAY,CAACD,IAAI,GAAG,EAAE;IAC/B;EACJ;AAEJ,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}