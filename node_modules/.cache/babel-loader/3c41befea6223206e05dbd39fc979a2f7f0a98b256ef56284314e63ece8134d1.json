{"ast":null,"code":"var AWS = require('../core');\nvar util = require('../util');\nvar QueryParamSerializer = require('../query/query_param_serializer');\nvar Shape = require('../model/shape');\nvar populateHostPrefix = require('./helpers').populateHostPrefix;\nfunction buildRequest(req) {\n  var operation = req.service.api.operations[req.operation];\n  var httpRequest = req.httpRequest;\n  httpRequest.headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';\n  httpRequest.params = {\n    Version: req.service.api.apiVersion,\n    Action: operation.name\n  };\n\n  // convert the request parameters into a list of query params,\n  // e.g. Deeply.NestedParam.0.Name=value\n  var builder = new QueryParamSerializer();\n  builder.serialize(req.params, operation.input, function (name, value) {\n    httpRequest.params[name] = value;\n  });\n  httpRequest.body = util.queryParamsToString(httpRequest.params);\n  populateHostPrefix(req);\n}\nfunction extractError(resp) {\n  var data,\n    body = resp.httpResponse.body.toString();\n  if (body.match('<UnknownOperationException')) {\n    data = {\n      Code: 'UnknownOperation',\n      Message: 'Unknown operation ' + resp.request.operation\n    };\n  } else {\n    try {\n      data = new AWS.XML.Parser().parse(body);\n    } catch (e) {\n      data = {\n        Code: resp.httpResponse.statusCode,\n        Message: resp.httpResponse.statusMessage\n      };\n    }\n  }\n  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\nfunction extractData(resp) {\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var shape = operation.output || {};\n  var origRules = shape;\n  if (origRules.resultWrapper) {\n    var tmp = Shape.create({\n      type: 'structure'\n    });\n    tmp.members[origRules.resultWrapper] = shape;\n    tmp.memberNames = [origRules.resultWrapper];\n    util.property(shape, 'name', shape.resultWrapper);\n    shape = tmp;\n  }\n  var parser = new AWS.XML.Parser();\n\n  // TODO: Refactor XML Parser to parse RequestId from response.\n  if (shape && shape.members && !shape.members._XAMZRequestId) {\n    var requestIdShape = Shape.create({\n      type: 'string'\n    }, {\n      api: {\n        protocol: 'query'\n      }\n    }, 'requestId');\n    shape.members._XAMZRequestId = requestIdShape;\n  }\n  var data = parser.parse(resp.httpResponse.body.toString(), shape);\n  resp.requestId = data._XAMZRequestId || data.requestId;\n  if (data._XAMZRequestId) delete data._XAMZRequestId;\n  if (origRules.resultWrapper) {\n    if (data[origRules.resultWrapper]) {\n      util.update(data, data[origRules.resultWrapper]);\n      delete data[origRules.resultWrapper];\n    }\n  }\n  resp.data = data;\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"names":["AWS","require","util","QueryParamSerializer","Shape","populateHostPrefix","buildRequest","req","operation","service","api","operations","httpRequest","headers","params","Version","apiVersion","Action","name","builder","serialize","input","value","body","queryParamsToString","extractError","resp","data","httpResponse","toString","match","Code","Message","request","XML","Parser","parse","e","statusCode","statusMessage","requestId","Errors","Error","error","code","message","extractData","shape","output","origRules","resultWrapper","tmp","create","type","members","memberNames","property","parser","_XAMZRequestId","requestIdShape","protocol","update","module","exports"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/protocol/query.js"],"sourcesContent":["var AWS = require('../core');\nvar util = require('../util');\nvar QueryParamSerializer = require('../query/query_param_serializer');\nvar Shape = require('../model/shape');\nvar populateHostPrefix = require('./helpers').populateHostPrefix;\n\nfunction buildRequest(req) {\n  var operation = req.service.api.operations[req.operation];\n  var httpRequest = req.httpRequest;\n  httpRequest.headers['Content-Type'] =\n    'application/x-www-form-urlencoded; charset=utf-8';\n  httpRequest.params = {\n    Version: req.service.api.apiVersion,\n    Action: operation.name\n  };\n\n  // convert the request parameters into a list of query params,\n  // e.g. Deeply.NestedParam.0.Name=value\n  var builder = new QueryParamSerializer();\n  builder.serialize(req.params, operation.input, function(name, value) {\n    httpRequest.params[name] = value;\n  });\n  httpRequest.body = util.queryParamsToString(httpRequest.params);\n\n  populateHostPrefix(req);\n}\n\nfunction extractError(resp) {\n  var data, body = resp.httpResponse.body.toString();\n  if (body.match('<UnknownOperationException')) {\n    data = {\n      Code: 'UnknownOperation',\n      Message: 'Unknown operation ' + resp.request.operation\n    };\n  } else {\n    try {\n      data = new AWS.XML.Parser().parse(body);\n    } catch (e) {\n      data = {\n        Code: resp.httpResponse.statusCode,\n        Message: resp.httpResponse.statusMessage\n      };\n    }\n  }\n\n  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\n\nfunction extractData(resp) {\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var shape = operation.output || {};\n  var origRules = shape;\n\n  if (origRules.resultWrapper) {\n    var tmp = Shape.create({type: 'structure'});\n    tmp.members[origRules.resultWrapper] = shape;\n    tmp.memberNames = [origRules.resultWrapper];\n    util.property(shape, 'name', shape.resultWrapper);\n    shape = tmp;\n  }\n\n  var parser = new AWS.XML.Parser();\n\n  // TODO: Refactor XML Parser to parse RequestId from response.\n  if (shape && shape.members && !shape.members._XAMZRequestId) {\n    var requestIdShape = Shape.create(\n      { type: 'string' },\n      { api: { protocol: 'query' } },\n      'requestId'\n    );\n    shape.members._XAMZRequestId = requestIdShape;\n  }\n\n  var data = parser.parse(resp.httpResponse.body.toString(), shape);\n  resp.requestId = data._XAMZRequestId || data.requestId;\n\n  if (data._XAMZRequestId) delete data._XAMZRequestId;\n\n  if (origRules.resultWrapper) {\n    if (data[origRules.resultWrapper]) {\n      util.update(data, data[origRules.resultWrapper]);\n      delete data[origRules.resultWrapper];\n    }\n  }\n\n  resp.data = data;\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}