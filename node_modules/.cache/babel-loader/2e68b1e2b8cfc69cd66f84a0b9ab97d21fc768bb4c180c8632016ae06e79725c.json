{"ast":null,"code":"var AWS = require('../core');\nvar rest = AWS.Protocol.Rest;\n\n/**\n * A presigner object can be used to generate presigned urls for the Polly service.\n */\nAWS.Polly.Presigner = AWS.util.inherit({\n  /**\n   * Creates a presigner object with a set of configuration options.\n   *\n   * @option options params [map] An optional map of parameters to bind to every\n   *   request sent by this service object.\n   * @option options service [AWS.Polly] An optional pre-configured instance\n   *  of the AWS.Polly service object to use for requests. The object may\n   *  bound parameters used by the presigner.\n   * @see AWS.Polly.constructor\n   */\n  constructor: function Signer(options) {\n    options = options || {};\n    this.options = options;\n    this.service = options.service;\n    this.bindServiceObject(options);\n    this._operations = {};\n  },\n  /**\n   * @api private\n   */\n  bindServiceObject: function bindServiceObject(options) {\n    options = options || {};\n    if (!this.service) {\n      this.service = new AWS.Polly(options);\n    } else {\n      var config = AWS.util.copy(this.service.config);\n      this.service = new this.service.constructor.__super__(config);\n      this.service.config.params = AWS.util.merge(this.service.config.params || {}, options.params);\n    }\n  },\n  /**\n   * @api private\n   */\n  modifyInputMembers: function modifyInputMembers(input) {\n    // make copies of the input so we don't overwrite the api\n    // need to be careful to copy anything we access/modify\n    var modifiedInput = AWS.util.copy(input);\n    modifiedInput.members = AWS.util.copy(input.members);\n    AWS.util.each(input.members, function (name, member) {\n      modifiedInput.members[name] = AWS.util.copy(member);\n      // update location and locationName\n      if (!member.location || member.location === 'body') {\n        modifiedInput.members[name].location = 'querystring';\n        modifiedInput.members[name].locationName = name;\n      }\n    });\n    return modifiedInput;\n  },\n  /**\n   * @api private\n   */\n  convertPostToGet: function convertPostToGet(req) {\n    // convert method\n    req.httpRequest.method = 'GET';\n    var operation = req.service.api.operations[req.operation];\n    // get cached operation input first\n    var input = this._operations[req.operation];\n    if (!input) {\n      // modify the original input\n      this._operations[req.operation] = input = this.modifyInputMembers(operation.input);\n    }\n    var uri = rest.generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);\n    req.httpRequest.path = uri;\n    req.httpRequest.body = '';\n\n    // don't need these headers on a GET request\n    delete req.httpRequest.headers['Content-Length'];\n    delete req.httpRequest.headers['Content-Type'];\n  },\n  /**\n   * @overload getSynthesizeSpeechUrl(params = {}, [expires = 3600], [callback])\n   *   Generate a presigned url for {AWS.Polly.synthesizeSpeech}.\n   *   @note You must ensure that you have static or previously resolved\n   *     credentials if you call this method synchronously (with no callback),\n   *     otherwise it may not properly sign the request. If you cannot guarantee\n   *     this (you are using an asynchronous credential provider, i.e., EC2\n   *     IAM roles), you should always call this method with an asynchronous\n   *     callback.\n   *   @param params [map] parameters to pass to the operation. See the {AWS.Polly.synthesizeSpeech}\n   *     operation for the expected operation parameters.\n   *   @param expires [Integer] (3600) the number of seconds to expire the pre-signed URL operation in.\n   *     Defaults to 1 hour.\n   *   @return [string] if called synchronously (with no callback), returns the signed URL.\n   *   @return [null] nothing is returned if a callback is provided.\n   *   @callback callback function (err, url)\n   *     If a callback is supplied, it is called when a signed URL has been generated.\n   *     @param err [Error] the error object returned from the presigner.\n   *     @param url [String] the signed URL.\n   *   @see AWS.Polly.synthesizeSpeech\n   */\n  getSynthesizeSpeechUrl: function getSynthesizeSpeechUrl(params, expires, callback) {\n    var self = this;\n    var request = this.service.makeRequest('synthesizeSpeech', params);\n    // remove existing build listeners\n    request.removeAllListeners('build');\n    request.on('build', function (req) {\n      self.convertPostToGet(req);\n    });\n    return request.presign(expires, callback);\n  }\n});","map":{"version":3,"names":["AWS","require","rest","Protocol","Rest","Polly","Presigner","util","inherit","constructor","Signer","options","service","bindServiceObject","_operations","config","copy","__super__","params","merge","modifyInputMembers","input","modifiedInput","members","each","name","member","location","locationName","convertPostToGet","req","httpRequest","method","operation","api","operations","uri","generateURI","endpoint","path","httpPath","body","headers","getSynthesizeSpeechUrl","expires","callback","self","request","makeRequest","removeAllListeners","on","presign"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/polly/presigner.js"],"sourcesContent":["var AWS = require('../core');\nvar rest = AWS.Protocol.Rest;\n\n/**\n * A presigner object can be used to generate presigned urls for the Polly service.\n */\nAWS.Polly.Presigner = AWS.util.inherit({\n    /**\n     * Creates a presigner object with a set of configuration options.\n     *\n     * @option options params [map] An optional map of parameters to bind to every\n     *   request sent by this service object.\n     * @option options service [AWS.Polly] An optional pre-configured instance\n     *  of the AWS.Polly service object to use for requests. The object may\n     *  bound parameters used by the presigner.\n     * @see AWS.Polly.constructor\n     */\n    constructor: function Signer(options) {\n        options = options || {};\n        this.options = options;\n        this.service = options.service;\n        this.bindServiceObject(options);\n        this._operations = {};\n    },\n\n    /**\n     * @api private\n     */\n    bindServiceObject: function bindServiceObject(options) {\n        options = options || {};\n        if (!this.service) {\n            this.service = new AWS.Polly(options);\n        } else {\n            var config = AWS.util.copy(this.service.config);\n            this.service = new this.service.constructor.__super__(config);\n            this.service.config.params = AWS.util.merge(this.service.config.params || {}, options.params);\n        }\n    },\n\n    /**\n     * @api private\n     */\n    modifyInputMembers: function modifyInputMembers(input) {\n        // make copies of the input so we don't overwrite the api\n        // need to be careful to copy anything we access/modify\n        var modifiedInput = AWS.util.copy(input);\n        modifiedInput.members = AWS.util.copy(input.members);\n        AWS.util.each(input.members, function(name, member) {\n            modifiedInput.members[name] = AWS.util.copy(member);\n            // update location and locationName\n            if (!member.location || member.location === 'body') {\n                modifiedInput.members[name].location = 'querystring';\n                modifiedInput.members[name].locationName = name;\n            }\n        });\n        return modifiedInput;\n    },\n\n    /**\n     * @api private\n     */\n    convertPostToGet: function convertPostToGet(req) {\n        // convert method\n        req.httpRequest.method = 'GET';\n\n        var operation = req.service.api.operations[req.operation];\n        // get cached operation input first\n        var input = this._operations[req.operation];\n        if (!input) {\n            // modify the original input\n            this._operations[req.operation] = input = this.modifyInputMembers(operation.input);\n        }\n\n        var uri = rest.generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);\n\n        req.httpRequest.path = uri;\n        req.httpRequest.body = '';\n\n        // don't need these headers on a GET request\n        delete req.httpRequest.headers['Content-Length'];\n        delete req.httpRequest.headers['Content-Type'];\n    },\n\n    /**\n     * @overload getSynthesizeSpeechUrl(params = {}, [expires = 3600], [callback])\n     *   Generate a presigned url for {AWS.Polly.synthesizeSpeech}.\n     *   @note You must ensure that you have static or previously resolved\n     *     credentials if you call this method synchronously (with no callback),\n     *     otherwise it may not properly sign the request. If you cannot guarantee\n     *     this (you are using an asynchronous credential provider, i.e., EC2\n     *     IAM roles), you should always call this method with an asynchronous\n     *     callback.\n     *   @param params [map] parameters to pass to the operation. See the {AWS.Polly.synthesizeSpeech}\n     *     operation for the expected operation parameters.\n     *   @param expires [Integer] (3600) the number of seconds to expire the pre-signed URL operation in.\n     *     Defaults to 1 hour.\n     *   @return [string] if called synchronously (with no callback), returns the signed URL.\n     *   @return [null] nothing is returned if a callback is provided.\n     *   @callback callback function (err, url)\n     *     If a callback is supplied, it is called when a signed URL has been generated.\n     *     @param err [Error] the error object returned from the presigner.\n     *     @param url [String] the signed URL.\n     *   @see AWS.Polly.synthesizeSpeech\n     */\n    getSynthesizeSpeechUrl: function getSynthesizeSpeechUrl(params, expires, callback) {\n        var self = this;\n        var request = this.service.makeRequest('synthesizeSpeech', params);\n        // remove existing build listeners\n        request.removeAllListeners('build');\n        request.on('build', function(req) {\n            self.convertPostToGet(req);\n        });\n        return request.presign(expires, callback);\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}