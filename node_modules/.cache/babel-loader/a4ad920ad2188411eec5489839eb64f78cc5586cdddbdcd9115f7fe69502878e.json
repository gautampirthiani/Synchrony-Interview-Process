{"ast":null,"code":"var util = require('../core').util;\nvar toBuffer = util.buffer.toBuffer;\n\n// All prelude components are unsigned, 32-bit integers\nvar PRELUDE_MEMBER_LENGTH = 4;\n// The prelude consists of two components\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\n// Checksums are always CRC32 hashes.\nvar CHECKSUM_LENGTH = 4;\n// Messages must include a full prelude, a prelude checksum, and a message checksum\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n\n/**\n * @api private\n *\n * @param {Buffer} message\n */\nfunction splitMessage(message) {\n  if (!util.Buffer.isBuffer(message)) message = toBuffer(message);\n  if (message.length < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error('Provided message too short to accommodate event stream message overhead');\n  }\n  if (message.length !== message.readUInt32BE(0)) {\n    throw new Error('Reported message length does not match received message length');\n  }\n  var expectedPreludeChecksum = message.readUInt32BE(PRELUDE_LENGTH);\n  if (expectedPreludeChecksum !== util.crypto.crc32(message.slice(0, PRELUDE_LENGTH))) {\n    throw new Error('The prelude checksum specified in the message (' + expectedPreludeChecksum + ') does not match the calculated CRC32 checksum.');\n  }\n  var expectedMessageChecksum = message.readUInt32BE(message.length - CHECKSUM_LENGTH);\n  if (expectedMessageChecksum !== util.crypto.crc32(message.slice(0, message.length - CHECKSUM_LENGTH))) {\n    throw new Error('The message checksum did not match the expected value of ' + expectedMessageChecksum);\n  }\n  var headersStart = PRELUDE_LENGTH + CHECKSUM_LENGTH;\n  var headersEnd = headersStart + message.readUInt32BE(PRELUDE_MEMBER_LENGTH);\n  return {\n    headers: message.slice(headersStart, headersEnd),\n    body: message.slice(headersEnd, message.length - CHECKSUM_LENGTH)\n  };\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  splitMessage: splitMessage\n};","map":{"version":3,"names":["util","require","toBuffer","buffer","PRELUDE_MEMBER_LENGTH","PRELUDE_LENGTH","CHECKSUM_LENGTH","MINIMUM_MESSAGE_LENGTH","splitMessage","message","Buffer","isBuffer","length","Error","readUInt32BE","expectedPreludeChecksum","crypto","crc32","slice","expectedMessageChecksum","headersStart","headersEnd","headers","body","module","exports"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/event-stream/split-message.js"],"sourcesContent":["var util = require('../core').util;\nvar toBuffer = util.buffer.toBuffer;\n\n// All prelude components are unsigned, 32-bit integers\nvar PRELUDE_MEMBER_LENGTH = 4;\n// The prelude consists of two components\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\n// Checksums are always CRC32 hashes.\nvar CHECKSUM_LENGTH = 4;\n// Messages must include a full prelude, a prelude checksum, and a message checksum\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n\n/**\n * @api private\n *\n * @param {Buffer} message\n */\nfunction splitMessage(message) {\n    if (!util.Buffer.isBuffer(message)) message = toBuffer(message);\n\n    if (message.length < MINIMUM_MESSAGE_LENGTH) {\n        throw new Error('Provided message too short to accommodate event stream message overhead');\n    }\n\n    if (message.length !== message.readUInt32BE(0)) {\n        throw new Error('Reported message length does not match received message length');\n    }\n\n    var expectedPreludeChecksum = message.readUInt32BE(PRELUDE_LENGTH);\n\n    if (\n        expectedPreludeChecksum !== util.crypto.crc32(\n            message.slice(0, PRELUDE_LENGTH)\n        )\n    ) {\n        throw new Error(\n            'The prelude checksum specified in the message (' +\n            expectedPreludeChecksum +\n            ') does not match the calculated CRC32 checksum.'\n        );\n    }\n\n    var expectedMessageChecksum = message.readUInt32BE(message.length - CHECKSUM_LENGTH);\n\n    if (\n        expectedMessageChecksum !== util.crypto.crc32(\n            message.slice(0, message.length - CHECKSUM_LENGTH)\n        )\n    ) {\n        throw new Error(\n            'The message checksum did not match the expected value of ' +\n                expectedMessageChecksum\n        );\n    }\n\n    var headersStart = PRELUDE_LENGTH + CHECKSUM_LENGTH;\n    var headersEnd = headersStart + message.readUInt32BE(PRELUDE_MEMBER_LENGTH);\n\n    return {\n        headers: message.slice(headersStart, headersEnd),\n        body: message.slice(headersEnd, message.length - CHECKSUM_LENGTH),\n    };\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n    splitMessage: splitMessage\n};\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACD,IAAI;AAClC,IAAIE,QAAQ,GAAGF,IAAI,CAACG,MAAM,CAACD,QAAQ;;AAEnC;AACA,IAAIE,qBAAqB,GAAG,CAAC;AAC7B;AACA,IAAIC,cAAc,GAAGD,qBAAqB,GAAG,CAAC;AAC9C;AACA,IAAIE,eAAe,GAAG,CAAC;AACvB;AACA,IAAIC,sBAAsB,GAAGF,cAAc,GAAGC,eAAe,GAAG,CAAC;;AAEjE;AACA;AACA;AACA;AACA;AACA,SAASE,YAAYA,CAACC,OAAO,EAAE;EAC3B,IAAI,CAACT,IAAI,CAACU,MAAM,CAACC,QAAQ,CAACF,OAAO,CAAC,EAAEA,OAAO,GAAGP,QAAQ,CAACO,OAAO,CAAC;EAE/D,IAAIA,OAAO,CAACG,MAAM,GAAGL,sBAAsB,EAAE;IACzC,MAAM,IAAIM,KAAK,CAAC,yEAAyE,CAAC;EAC9F;EAEA,IAAIJ,OAAO,CAACG,MAAM,KAAKH,OAAO,CAACK,YAAY,CAAC,CAAC,CAAC,EAAE;IAC5C,MAAM,IAAID,KAAK,CAAC,gEAAgE,CAAC;EACrF;EAEA,IAAIE,uBAAuB,GAAGN,OAAO,CAACK,YAAY,CAACT,cAAc,CAAC;EAElE,IACIU,uBAAuB,KAAKf,IAAI,CAACgB,MAAM,CAACC,KAAK,CACzCR,OAAO,CAACS,KAAK,CAAC,CAAC,EAAEb,cAAc,CACnC,CAAC,EACH;IACE,MAAM,IAAIQ,KAAK,CACX,iDAAiD,GACjDE,uBAAuB,GACvB,iDACJ,CAAC;EACL;EAEA,IAAII,uBAAuB,GAAGV,OAAO,CAACK,YAAY,CAACL,OAAO,CAACG,MAAM,GAAGN,eAAe,CAAC;EAEpF,IACIa,uBAAuB,KAAKnB,IAAI,CAACgB,MAAM,CAACC,KAAK,CACzCR,OAAO,CAACS,KAAK,CAAC,CAAC,EAAET,OAAO,CAACG,MAAM,GAAGN,eAAe,CACrD,CAAC,EACH;IACE,MAAM,IAAIO,KAAK,CACX,2DAA2D,GACvDM,uBACR,CAAC;EACL;EAEA,IAAIC,YAAY,GAAGf,cAAc,GAAGC,eAAe;EACnD,IAAIe,UAAU,GAAGD,YAAY,GAAGX,OAAO,CAACK,YAAY,CAACV,qBAAqB,CAAC;EAE3E,OAAO;IACHkB,OAAO,EAAEb,OAAO,CAACS,KAAK,CAACE,YAAY,EAAEC,UAAU,CAAC;IAChDE,IAAI,EAAEd,OAAO,CAACS,KAAK,CAACG,UAAU,EAAEZ,OAAO,CAACG,MAAM,GAAGN,eAAe;EACpE,CAAC;AACL;;AAEA;AACA;AACA;AACAkB,MAAM,CAACC,OAAO,GAAG;EACbjB,YAAY,EAAEA;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}