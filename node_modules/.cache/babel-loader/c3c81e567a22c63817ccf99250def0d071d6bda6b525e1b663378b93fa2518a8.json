{"ast":null,"code":"var AWS = require('../core');\nvar regionUtil = require('../region_config');\nvar s3util = {\n  /**\n   * @api private\n   */\n  isArnInParam: function isArnInParam(req, paramName) {\n    var inputShape = (req.service.api.operations[req.operation] || {}).input || {};\n    var inputMembers = inputShape.members || {};\n    if (!req.params[paramName] || !inputMembers[paramName]) return false;\n    return AWS.util.ARN.validate(req.params[paramName]);\n  },\n  /**\n   * Validate service component from ARN supplied in Bucket parameter\n   */\n  validateArnService: function validateArnService(req) {\n    var parsedArn = req._parsedArn;\n    if (parsedArn.service !== 's3' && parsedArn.service !== 's3-outposts' && parsedArn.service !== 's3-object-lambda') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'expect \\'s3\\' or \\'s3-outposts\\' or \\'s3-object-lambda\\' in ARN service component'\n      });\n    }\n  },\n  /**\n   * Validate account ID from ARN supplied in Bucket parameter is a valid account\n   */\n  validateArnAccount: function validateArnAccount(req) {\n    var parsedArn = req._parsedArn;\n    if (!/[0-9]{12}/.exec(parsedArn.accountId)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN accountID does not match regex \"[0-9]{12}\"'\n      });\n    }\n  },\n  /**\n   * Validate ARN supplied in Bucket parameter is a valid access point ARN\n   */\n  validateS3AccessPointArn: function validateS3AccessPointArn(req) {\n    var parsedArn = req._parsedArn;\n\n    //can be ':' or '/'\n    var delimiter = parsedArn.resource['accesspoint'.length];\n    if (parsedArn.resource.split(delimiter).length !== 2) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access Point ARN should have one resource accesspoint/{accesspointName}'\n      });\n    }\n    var accessPoint = parsedArn.resource.split(delimiter)[1];\n    var accessPointPrefix = accessPoint + '-' + parsedArn.accountId;\n    if (!s3util.dnsCompatibleBucketName(accessPointPrefix) || accessPointPrefix.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access point resource in ARN is not DNS compatible. Got ' + accessPoint\n      });\n    }\n\n    //set parsed valid access point\n    req._parsedArn.accessPoint = accessPoint;\n  },\n  /**\n   * Validate Outposts ARN supplied in Bucket parameter is a valid outposts ARN\n   */\n  validateOutpostsArn: function validateOutpostsArn(req) {\n    var parsedArn = req._parsedArn;\n    if (parsedArn.resource.indexOf('outpost:') !== 0 && parsedArn.resource.indexOf('outpost/') !== 0) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN resource should begin with \\'outpost/\\''\n      });\n    }\n\n    //can be ':' or '/'\n    var delimiter = parsedArn.resource['outpost'.length];\n    var outpostId = parsedArn.resource.split(delimiter)[1];\n    var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n    if (!dnsHostRegex.test(outpostId)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Outpost resource in ARN is not DNS compatible. Got ' + outpostId\n      });\n    }\n    req._parsedArn.outpostId = outpostId;\n  },\n  /**\n   * Validate Outposts ARN supplied in Bucket parameter is a valid outposts ARN\n   */\n  validateOutpostsAccessPointArn: function validateOutpostsAccessPointArn(req) {\n    var parsedArn = req._parsedArn;\n\n    //can be ':' or '/'\n    var delimiter = parsedArn.resource['outpost'.length];\n    if (parsedArn.resource.split(delimiter).length !== 4) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Outposts ARN should have two resources outpost/{outpostId}/accesspoint/{accesspointName}'\n      });\n    }\n    var accessPoint = parsedArn.resource.split(delimiter)[3];\n    var accessPointPrefix = accessPoint + '-' + parsedArn.accountId;\n    if (!s3util.dnsCompatibleBucketName(accessPointPrefix) || accessPointPrefix.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access point resource in ARN is not DNS compatible. Got ' + accessPoint\n      });\n    }\n\n    //set parsed valid access point\n    req._parsedArn.accessPoint = accessPoint;\n  },\n  /**\n   * Validate region field in ARN supplied in Bucket parameter is a valid region\n   */\n  validateArnRegion: function validateArnRegion(req, options) {\n    if (options === undefined) {\n      options = {};\n    }\n    var useArnRegion = s3util.loadUseArnRegionConfig(req);\n    var regionFromArn = req._parsedArn.region;\n    var clientRegion = req.service.config.region;\n    var useFipsEndpoint = req.service.config.useFipsEndpoint;\n    var allowFipsEndpoint = options.allowFipsEndpoint || false;\n    if (!regionFromArn) {\n      var message = 'ARN region is empty';\n      if (req._parsedArn.service === 's3') {\n        message = message + '\\nYou may want to use multi-regional ARN. The feature is not supported in current SDK. ' + 'You should consider switching to V3(https://github.com/aws/aws-sdk-js-v3).';\n      }\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: message\n      });\n    }\n    if (useFipsEndpoint && !allowFipsEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'ARN endpoint is not compatible with FIPS region'\n      });\n    }\n    if (regionFromArn.indexOf('fips') >= 0) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'FIPS region not allowed in ARN'\n      });\n    }\n    if (!useArnRegion && regionFromArn !== clientRegion) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region conflicts with access point region'\n      });\n    } else if (useArnRegion && regionUtil.getEndpointSuffix(regionFromArn) !== regionUtil.getEndpointSuffix(clientRegion)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region and access point region not in same partition'\n      });\n    }\n    if (req.service.config.useAccelerateEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'useAccelerateEndpoint config is not supported with access point ARN'\n      });\n    }\n    if (req._parsedArn.service === 's3-outposts' && req.service.config.useDualstackEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Dualstack is not supported with outposts access point ARN'\n      });\n    }\n  },\n  loadUseArnRegionConfig: function loadUseArnRegionConfig(req) {\n    var envName = 'AWS_S3_USE_ARN_REGION';\n    var configName = 's3_use_arn_region';\n    var useArnRegion = true;\n    var originalConfig = req.service._originalConfig || {};\n    if (req.service.config.s3UseArnRegion !== undefined) {\n      return req.service.config.s3UseArnRegion;\n    } else if (originalConfig.s3UseArnRegion !== undefined) {\n      useArnRegion = originalConfig.s3UseArnRegion === true;\n    } else if (AWS.util.isNode()) {\n      //load from environmental variable AWS_USE_ARN_REGION\n      if (process.env[envName]) {\n        var value = process.env[envName].trim().toLowerCase();\n        if (['false', 'true'].indexOf(value) < 0) {\n          throw AWS.util.error(new Error(), {\n            code: 'InvalidConfiguration',\n            message: envName + ' only accepts true or false. Got ' + process.env[envName],\n            retryable: false\n          });\n        }\n        useArnRegion = value === 'true';\n      } else {\n        //load from shared config property use_arn_region\n        var profiles = {};\n        var profile = {};\n        try {\n          profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);\n          profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];\n        } catch (e) {}\n        if (profile[configName]) {\n          if (['false', 'true'].indexOf(profile[configName].trim().toLowerCase()) < 0) {\n            throw AWS.util.error(new Error(), {\n              code: 'InvalidConfiguration',\n              message: configName + ' only accepts true or false. Got ' + profile[configName],\n              retryable: false\n            });\n          }\n          useArnRegion = profile[configName].trim().toLowerCase() === 'true';\n        }\n      }\n    }\n    req.service.config.s3UseArnRegion = useArnRegion;\n    return useArnRegion;\n  },\n  /**\n   * Validations before URI can be populated\n   */\n  validatePopulateUriFromArn: function validatePopulateUriFromArn(req) {\n    if (req.service._originalConfig && req.service._originalConfig.endpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Custom endpoint is not compatible with access point ARN'\n      });\n    }\n    if (req.service.config.s3ForcePathStyle) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Cannot construct path-style endpoint with access point'\n      });\n    }\n  },\n  /**\n   * Returns true if the bucket name is DNS compatible.  Buckets created\n   * outside of the classic region MUST be DNS compatible.\n   *\n   * @api private\n   */\n  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {\n    var b = bucketName;\n    var domain = new RegExp(/^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/);\n    var ipAddress = new RegExp(/(\\d+\\.){3}\\d+/);\n    var dots = new RegExp(/\\.\\./);\n    return b.match(domain) && !b.match(ipAddress) && !b.match(dots) ? true : false;\n  }\n};\n\n/**\n * @api private\n */\nmodule.exports = s3util;","map":{"version":3,"names":["AWS","require","regionUtil","s3util","isArnInParam","req","paramName","inputShape","service","api","operations","operation","input","inputMembers","members","params","util","ARN","validate","validateArnService","parsedArn","_parsedArn","error","Error","code","message","validateArnAccount","exec","accountId","validateS3AccessPointArn","delimiter","resource","length","split","accessPoint","accessPointPrefix","dnsCompatibleBucketName","match","validateOutpostsArn","indexOf","outpostId","dnsHostRegex","RegExp","test","validateOutpostsAccessPointArn","validateArnRegion","options","undefined","useArnRegion","loadUseArnRegionConfig","regionFromArn","region","clientRegion","config","useFipsEndpoint","allowFipsEndpoint","getEndpointSuffix","useAccelerateEndpoint","useDualstackEndpoint","envName","configName","originalConfig","_originalConfig","s3UseArnRegion","isNode","process","env","value","trim","toLowerCase","retryable","profiles","profile","getProfilesFromSharedConfig","iniLoader","AWS_PROFILE","defaultProfile","e","validatePopulateUriFromArn","endpoint","s3ForcePathStyle","bucketName","b","domain","ipAddress","dots","module","exports"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/services/s3util.js"],"sourcesContent":["var AWS = require('../core');\nvar regionUtil = require('../region_config');\n\nvar s3util = {\n  /**\n   * @api private\n   */\n  isArnInParam: function isArnInParam(req, paramName) {\n    var inputShape = (req.service.api.operations[req.operation] || {}).input || {};\n    var inputMembers = inputShape.members || {};\n    if (!req.params[paramName] || !inputMembers[paramName]) return false;\n    return AWS.util.ARN.validate(req.params[paramName]);\n  },\n\n  /**\n   * Validate service component from ARN supplied in Bucket parameter\n   */\n  validateArnService: function validateArnService(req) {\n    var parsedArn = req._parsedArn;\n\n    if (parsedArn.service !== 's3'\n      && parsedArn.service !== 's3-outposts'\n      && parsedArn.service !== 's3-object-lambda') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'expect \\'s3\\' or \\'s3-outposts\\' or \\'s3-object-lambda\\' in ARN service component'\n      });\n    }\n  },\n\n  /**\n   * Validate account ID from ARN supplied in Bucket parameter is a valid account\n   */\n  validateArnAccount: function validateArnAccount(req) {\n    var parsedArn = req._parsedArn;\n\n    if (!/[0-9]{12}/.exec(parsedArn.accountId)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN accountID does not match regex \"[0-9]{12}\"'\n      });\n    }\n  },\n\n  /**\n   * Validate ARN supplied in Bucket parameter is a valid access point ARN\n   */\n  validateS3AccessPointArn: function validateS3AccessPointArn(req) {\n    var parsedArn = req._parsedArn;\n\n    //can be ':' or '/'\n    var delimiter = parsedArn.resource['accesspoint'.length];\n\n    if (parsedArn.resource.split(delimiter).length !== 2) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access Point ARN should have one resource accesspoint/{accesspointName}'\n      });\n    }\n\n    var accessPoint = parsedArn.resource.split(delimiter)[1];\n    var accessPointPrefix = accessPoint + '-' + parsedArn.accountId;\n    if (!s3util.dnsCompatibleBucketName(accessPointPrefix) || accessPointPrefix.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access point resource in ARN is not DNS compatible. Got ' + accessPoint\n      });\n    }\n\n    //set parsed valid access point\n    req._parsedArn.accessPoint = accessPoint;\n  },\n\n  /**\n   * Validate Outposts ARN supplied in Bucket parameter is a valid outposts ARN\n   */\n  validateOutpostsArn: function validateOutpostsArn(req) {\n    var parsedArn = req._parsedArn;\n\n    if (\n      parsedArn.resource.indexOf('outpost:') !== 0 &&\n      parsedArn.resource.indexOf('outpost/') !== 0\n    ) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN resource should begin with \\'outpost/\\''\n      });\n    }\n\n    //can be ':' or '/'\n    var delimiter = parsedArn.resource['outpost'.length];\n    var outpostId = parsedArn.resource.split(delimiter)[1];\n    var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n    if (!dnsHostRegex.test(outpostId)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Outpost resource in ARN is not DNS compatible. Got ' + outpostId\n      });\n    }\n    req._parsedArn.outpostId = outpostId;\n  },\n\n  /**\n   * Validate Outposts ARN supplied in Bucket parameter is a valid outposts ARN\n   */\n  validateOutpostsAccessPointArn: function validateOutpostsAccessPointArn(req) {\n    var parsedArn = req._parsedArn;\n\n    //can be ':' or '/'\n    var delimiter = parsedArn.resource['outpost'.length];\n\n    if (parsedArn.resource.split(delimiter).length !== 4) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Outposts ARN should have two resources outpost/{outpostId}/accesspoint/{accesspointName}'\n      });\n    }\n\n    var accessPoint = parsedArn.resource.split(delimiter)[3];\n    var accessPointPrefix = accessPoint + '-' + parsedArn.accountId;\n    if (!s3util.dnsCompatibleBucketName(accessPointPrefix) || accessPointPrefix.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access point resource in ARN is not DNS compatible. Got ' + accessPoint\n      });\n    }\n\n    //set parsed valid access point\n    req._parsedArn.accessPoint = accessPoint;\n  },\n\n  /**\n   * Validate region field in ARN supplied in Bucket parameter is a valid region\n   */\n  validateArnRegion: function validateArnRegion(req, options) {\n    if (options === undefined) {\n      options = {};\n    }\n\n    var useArnRegion = s3util.loadUseArnRegionConfig(req);\n    var regionFromArn = req._parsedArn.region;\n    var clientRegion = req.service.config.region;\n    var useFipsEndpoint = req.service.config.useFipsEndpoint;\n    var allowFipsEndpoint = options.allowFipsEndpoint || false;\n\n    if (!regionFromArn) {\n      var message = 'ARN region is empty';\n      if (req._parsedArn.service === 's3') {\n        message = message + '\\nYou may want to use multi-regional ARN. The feature is not supported in current SDK. ' +\n        'You should consider switching to V3(https://github.com/aws/aws-sdk-js-v3).';\n      }\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: message\n      });\n    }\n\n    if (useFipsEndpoint && !allowFipsEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'ARN endpoint is not compatible with FIPS region'\n      });\n    }\n\n    if (regionFromArn.indexOf('fips') >= 0) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'FIPS region not allowed in ARN'\n      });\n    }\n\n    if (!useArnRegion && regionFromArn !== clientRegion) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region conflicts with access point region'\n      });\n    } else if (\n      useArnRegion &&\n      regionUtil.getEndpointSuffix(regionFromArn) !== regionUtil.getEndpointSuffix(clientRegion)\n    ) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region and access point region not in same partition'\n      });\n    }\n\n    if (req.service.config.useAccelerateEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'useAccelerateEndpoint config is not supported with access point ARN'\n      });\n    }\n\n    if (req._parsedArn.service === 's3-outposts' && req.service.config.useDualstackEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Dualstack is not supported with outposts access point ARN'\n      });\n    }\n  },\n\n  loadUseArnRegionConfig: function loadUseArnRegionConfig(req) {\n    var envName = 'AWS_S3_USE_ARN_REGION';\n    var configName = 's3_use_arn_region';\n    var useArnRegion = true;\n    var originalConfig = req.service._originalConfig || {};\n    if (req.service.config.s3UseArnRegion !== undefined) {\n      return req.service.config.s3UseArnRegion;\n    } else if (originalConfig.s3UseArnRegion !== undefined) {\n      useArnRegion = originalConfig.s3UseArnRegion === true;\n    } else if (AWS.util.isNode()) {\n      //load from environmental variable AWS_USE_ARN_REGION\n      if (process.env[envName]) {\n        var value = process.env[envName].trim().toLowerCase();\n        if (['false', 'true'].indexOf(value) < 0) {\n          throw AWS.util.error(new Error(), {\n            code: 'InvalidConfiguration',\n            message: envName + ' only accepts true or false. Got ' + process.env[envName],\n            retryable: false\n          });\n        }\n        useArnRegion = value === 'true';\n      } else {  //load from shared config property use_arn_region\n        var profiles = {};\n        var profile = {};\n        try {\n          profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);\n          profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];\n        } catch (e) {}\n        if (profile[configName]) {\n          if (['false', 'true'].indexOf(profile[configName].trim().toLowerCase()) < 0) {\n            throw AWS.util.error(new Error(), {\n              code: 'InvalidConfiguration',\n              message: configName + ' only accepts true or false. Got ' + profile[configName],\n              retryable: false\n            });\n          }\n          useArnRegion = profile[configName].trim().toLowerCase() === 'true';\n        }\n      }\n    }\n    req.service.config.s3UseArnRegion = useArnRegion;\n    return useArnRegion;\n  },\n\n  /**\n   * Validations before URI can be populated\n   */\n  validatePopulateUriFromArn: function validatePopulateUriFromArn(req) {\n    if (req.service._originalConfig && req.service._originalConfig.endpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Custom endpoint is not compatible with access point ARN'\n      });\n    }\n\n    if (req.service.config.s3ForcePathStyle) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Cannot construct path-style endpoint with access point'\n      });\n    }\n  },\n\n  /**\n   * Returns true if the bucket name is DNS compatible.  Buckets created\n   * outside of the classic region MUST be DNS compatible.\n   *\n   * @api private\n   */\n  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {\n    var b = bucketName;\n    var domain = new RegExp(/^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/);\n    var ipAddress = new RegExp(/(\\d+\\.){3}\\d+/);\n    var dots = new RegExp(/\\.\\./);\n    return (b.match(domain) && !b.match(ipAddress) && !b.match(dots)) ? true : false;\n  },\n};\n\n/**\n * @api private\n */\nmodule.exports = s3util;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}