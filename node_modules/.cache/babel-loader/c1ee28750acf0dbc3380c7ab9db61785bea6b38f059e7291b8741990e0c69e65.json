{"ast":null,"code":"var Int64 = require('./int64').Int64;\nvar splitMessage = require('./split-message').splitMessage;\nvar BOOLEAN_TAG = 'boolean';\nvar BYTE_TAG = 'byte';\nvar SHORT_TAG = 'short';\nvar INT_TAG = 'integer';\nvar LONG_TAG = 'long';\nvar BINARY_TAG = 'binary';\nvar STRING_TAG = 'string';\nvar TIMESTAMP_TAG = 'timestamp';\nvar UUID_TAG = 'uuid';\n\n/**\n * @api private\n *\n * @param {Buffer} headers\n */\nfunction parseHeaders(headers) {\n  var out = {};\n  var position = 0;\n  while (position < headers.length) {\n    var nameLength = headers.readUInt8(position++);\n    var name = headers.slice(position, position + nameLength).toString();\n    position += nameLength;\n    switch (headers.readUInt8(position++)) {\n      case 0 /* boolTrue */:\n        out[name] = {\n          type: BOOLEAN_TAG,\n          value: true\n        };\n        break;\n      case 1 /* boolFalse */:\n        out[name] = {\n          type: BOOLEAN_TAG,\n          value: false\n        };\n        break;\n      case 2 /* byte */:\n        out[name] = {\n          type: BYTE_TAG,\n          value: headers.readInt8(position++)\n        };\n        break;\n      case 3 /* short */:\n        out[name] = {\n          type: SHORT_TAG,\n          value: headers.readInt16BE(position)\n        };\n        position += 2;\n        break;\n      case 4 /* integer */:\n        out[name] = {\n          type: INT_TAG,\n          value: headers.readInt32BE(position)\n        };\n        position += 4;\n        break;\n      case 5 /* long */:\n        out[name] = {\n          type: LONG_TAG,\n          value: new Int64(headers.slice(position, position + 8))\n        };\n        position += 8;\n        break;\n      case 6 /* byteArray */:\n        var binaryLength = headers.readUInt16BE(position);\n        position += 2;\n        out[name] = {\n          type: BINARY_TAG,\n          value: headers.slice(position, position + binaryLength)\n        };\n        position += binaryLength;\n        break;\n      case 7 /* string */:\n        var stringLength = headers.readUInt16BE(position);\n        position += 2;\n        out[name] = {\n          type: STRING_TAG,\n          value: headers.slice(position, position + stringLength).toString()\n        };\n        position += stringLength;\n        break;\n      case 8 /* timestamp */:\n        out[name] = {\n          type: TIMESTAMP_TAG,\n          value: new Date(new Int64(headers.slice(position, position + 8)).valueOf())\n        };\n        position += 8;\n        break;\n      case 9 /* uuid */:\n        var uuidChars = headers.slice(position, position + 16).toString('hex');\n        position += 16;\n        out[name] = {\n          type: UUID_TAG,\n          value: uuidChars.substr(0, 8) + '-' + uuidChars.substr(8, 4) + '-' + uuidChars.substr(12, 4) + '-' + uuidChars.substr(16, 4) + '-' + uuidChars.substr(20)\n        };\n        break;\n      default:\n        throw new Error('Unrecognized header type tag');\n    }\n  }\n  return out;\n}\nfunction parseMessage(message) {\n  var parsed = splitMessage(message);\n  return {\n    headers: parseHeaders(parsed.headers),\n    body: parsed.body\n  };\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  parseMessage: parseMessage\n};","map":{"version":3,"names":["Int64","require","splitMessage","BOOLEAN_TAG","BYTE_TAG","SHORT_TAG","INT_TAG","LONG_TAG","BINARY_TAG","STRING_TAG","TIMESTAMP_TAG","UUID_TAG","parseHeaders","headers","out","position","length","nameLength","readUInt8","name","slice","toString","type","value","readInt8","readInt16BE","readInt32BE","binaryLength","readUInt16BE","stringLength","Date","valueOf","uuidChars","substr","Error","parseMessage","message","parsed","body","module","exports"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/event-stream/parse-message.js"],"sourcesContent":["var Int64 = require('./int64').Int64;\n\nvar splitMessage = require('./split-message').splitMessage;\n\nvar BOOLEAN_TAG = 'boolean';\nvar BYTE_TAG = 'byte';\nvar SHORT_TAG = 'short';\nvar INT_TAG = 'integer';\nvar LONG_TAG = 'long';\nvar BINARY_TAG = 'binary';\nvar STRING_TAG = 'string';\nvar TIMESTAMP_TAG = 'timestamp';\nvar UUID_TAG = 'uuid';\n\n/**\n * @api private\n *\n * @param {Buffer} headers\n */\nfunction parseHeaders(headers) {\n    var out = {};\n    var position = 0;\n    while (position < headers.length) {\n        var nameLength = headers.readUInt8(position++);\n        var name = headers.slice(position, position + nameLength).toString();\n        position += nameLength;\n        switch (headers.readUInt8(position++)) {\n            case 0 /* boolTrue */:\n                out[name] = {\n                    type: BOOLEAN_TAG,\n                    value: true\n                };\n                break;\n            case 1 /* boolFalse */:\n                out[name] = {\n                    type: BOOLEAN_TAG,\n                    value: false\n                };\n                break;\n            case 2 /* byte */:\n                out[name] = {\n                    type: BYTE_TAG,\n                    value: headers.readInt8(position++)\n                };\n                break;\n            case 3 /* short */:\n                out[name] = {\n                    type: SHORT_TAG,\n                    value: headers.readInt16BE(position)\n                };\n                position += 2;\n                break;\n            case 4 /* integer */:\n                out[name] = {\n                    type: INT_TAG,\n                    value: headers.readInt32BE(position)\n                };\n                position += 4;\n                break;\n            case 5 /* long */:\n                out[name] = {\n                    type: LONG_TAG,\n                    value: new Int64(headers.slice(position, position + 8))\n                };\n                position += 8;\n                break;\n            case 6 /* byteArray */:\n                var binaryLength = headers.readUInt16BE(position);\n                position += 2;\n                out[name] = {\n                    type: BINARY_TAG,\n                    value: headers.slice(position, position + binaryLength)\n                };\n                position += binaryLength;\n                break;\n            case 7 /* string */:\n                var stringLength = headers.readUInt16BE(position);\n                position += 2;\n                out[name] = {\n                    type: STRING_TAG,\n                    value: headers.slice(\n                        position,\n                        position + stringLength\n                    ).toString()\n                };\n                position += stringLength;\n                break;\n            case 8 /* timestamp */:\n                out[name] = {\n                    type: TIMESTAMP_TAG,\n                    value: new Date(\n                        new Int64(headers.slice(position, position + 8))\n                            .valueOf()\n                    )\n                };\n                position += 8;\n                break;\n            case 9 /* uuid */:\n                var uuidChars = headers.slice(position, position + 16)\n                    .toString('hex');\n                position += 16;\n                out[name] = {\n                    type: UUID_TAG,\n                    value: uuidChars.substr(0, 8) + '-' +\n                        uuidChars.substr(8, 4) + '-' +\n                        uuidChars.substr(12, 4) + '-' +\n                        uuidChars.substr(16, 4) + '-' +\n                        uuidChars.substr(20)\n                };\n                break;\n            default:\n                throw new Error('Unrecognized header type tag');\n        }\n    }\n    return out;\n}\n\nfunction parseMessage(message) {\n    var parsed = splitMessage(message);\n    return { headers: parseHeaders(parsed.headers), body: parsed.body };\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n    parseMessage: parseMessage\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}