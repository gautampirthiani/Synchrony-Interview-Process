{"ast":null,"code":"var AWS = require('../core');\nvar inherit = AWS.util.inherit;\n\n/**\n * @api private\n */\nAWS.Signers.RequestSigner = inherit({\n  constructor: function RequestSigner(request) {\n    this.request = request;\n  },\n  setServiceClientId: function setServiceClientId(id) {\n    this.serviceClientId = id;\n  },\n  getServiceClientId: function getServiceClientId() {\n    return this.serviceClientId;\n  }\n});\nAWS.Signers.RequestSigner.getVersion = function getVersion(version) {\n  switch (version) {\n    case 'v2':\n      return AWS.Signers.V2;\n    case 'v3':\n      return AWS.Signers.V3;\n    case 's3v4':\n      return AWS.Signers.V4;\n    case 'v4':\n      return AWS.Signers.V4;\n    case 's3':\n      return AWS.Signers.S3;\n    case 'v3https':\n      return AWS.Signers.V3Https;\n    case 'bearer':\n      return AWS.Signers.Bearer;\n  }\n  throw new Error('Unknown signing version ' + version);\n};\nrequire('./v2');\nrequire('./v3');\nrequire('./v3https');\nrequire('./v4');\nrequire('./s3');\nrequire('./presign');\nrequire('./bearer');","map":{"version":3,"names":["AWS","require","inherit","util","Signers","RequestSigner","constructor","request","setServiceClientId","id","serviceClientId","getServiceClientId","getVersion","version","V2","V3","V4","S3","V3Https","Bearer","Error"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/signers/request_signer.js"],"sourcesContent":["var AWS = require('../core');\n\nvar inherit = AWS.util.inherit;\n\n/**\n * @api private\n */\nAWS.Signers.RequestSigner = inherit({\n  constructor: function RequestSigner(request) {\n    this.request = request;\n  },\n\n  setServiceClientId: function setServiceClientId(id) {\n    this.serviceClientId = id;\n  },\n\n  getServiceClientId: function getServiceClientId() {\n    return this.serviceClientId;\n  }\n});\n\nAWS.Signers.RequestSigner.getVersion = function getVersion(version) {\n  switch (version) {\n    case 'v2': return AWS.Signers.V2;\n    case 'v3': return AWS.Signers.V3;\n    case 's3v4': return AWS.Signers.V4;\n    case 'v4': return AWS.Signers.V4;\n    case 's3': return AWS.Signers.S3;\n    case 'v3https': return AWS.Signers.V3Https;\n    case 'bearer': return AWS.Signers.Bearer;\n  }\n  throw new Error('Unknown signing version ' + version);\n};\n\nrequire('./v2');\nrequire('./v3');\nrequire('./v3https');\nrequire('./v4');\nrequire('./s3');\nrequire('./presign');\nrequire('./bearer');\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE5B,IAAIC,OAAO,GAAGF,GAAG,CAACG,IAAI,CAACD,OAAO;;AAE9B;AACA;AACA;AACAF,GAAG,CAACI,OAAO,CAACC,aAAa,GAAGH,OAAO,CAAC;EAClCI,WAAW,EAAE,SAASD,aAAaA,CAACE,OAAO,EAAE;IAC3C,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB,CAAC;EAEDC,kBAAkB,EAAE,SAASA,kBAAkBA,CAACC,EAAE,EAAE;IAClD,IAAI,CAACC,eAAe,GAAGD,EAAE;EAC3B,CAAC;EAEDE,kBAAkB,EAAE,SAASA,kBAAkBA,CAAA,EAAG;IAChD,OAAO,IAAI,CAACD,eAAe;EAC7B;AACF,CAAC,CAAC;AAEFV,GAAG,CAACI,OAAO,CAACC,aAAa,CAACO,UAAU,GAAG,SAASA,UAAUA,CAACC,OAAO,EAAE;EAClE,QAAQA,OAAO;IACb,KAAK,IAAI;MAAE,OAAOb,GAAG,CAACI,OAAO,CAACU,EAAE;IAChC,KAAK,IAAI;MAAE,OAAOd,GAAG,CAACI,OAAO,CAACW,EAAE;IAChC,KAAK,MAAM;MAAE,OAAOf,GAAG,CAACI,OAAO,CAACY,EAAE;IAClC,KAAK,IAAI;MAAE,OAAOhB,GAAG,CAACI,OAAO,CAACY,EAAE;IAChC,KAAK,IAAI;MAAE,OAAOhB,GAAG,CAACI,OAAO,CAACa,EAAE;IAChC,KAAK,SAAS;MAAE,OAAOjB,GAAG,CAACI,OAAO,CAACc,OAAO;IAC1C,KAAK,QAAQ;MAAE,OAAOlB,GAAG,CAACI,OAAO,CAACe,MAAM;EAC1C;EACA,MAAM,IAAIC,KAAK,CAAC,0BAA0B,GAAGP,OAAO,CAAC;AACvD,CAAC;AAEDZ,OAAO,CAAC,MAAM,CAAC;AACfA,OAAO,CAAC,MAAM,CAAC;AACfA,OAAO,CAAC,WAAW,CAAC;AACpBA,OAAO,CAAC,MAAM,CAAC;AACfA,OAAO,CAAC,MAAM,CAAC;AACfA,OAAO,CAAC,WAAW,CAAC;AACpBA,OAAO,CAAC,UAAU,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}