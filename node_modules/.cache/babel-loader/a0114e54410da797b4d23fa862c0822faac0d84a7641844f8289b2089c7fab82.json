{"ast":null,"code":"var AWS = require('../core');\nvar Translator = require('./translator');\nvar DynamoDBSet = require('./set');\n\n/**\n * The document client simplifies working with items in Amazon DynamoDB\n * by abstracting away the notion of attribute values. This abstraction\n * annotates native JavaScript types supplied as input parameters, as well\n * as converts annotated response data to native JavaScript types.\n *\n * ## Marshalling Input and Unmarshalling Response Data\n *\n * The document client affords developers the use of native JavaScript types\n * instead of `AttributeValue`s to simplify the JavaScript development\n * experience with Amazon DynamoDB. JavaScript objects passed in as parameters\n * are marshalled into `AttributeValue` shapes required by Amazon DynamoDB.\n * Responses from DynamoDB are unmarshalled into plain JavaScript objects\n * by the `DocumentClient`. The `DocumentClient`, does not accept\n * `AttributeValue`s in favor of native JavaScript types.\n *\n * |                             JavaScript Type                            | DynamoDB AttributeValue |\n * |:----------------------------------------------------------------------:|-------------------------|\n * | String                                                                 | S                       |\n * | Number                                                                 | N                       |\n * | Boolean                                                                | BOOL                    |\n * | null                                                                   | NULL                    |\n * | Array                                                                  | L                       |\n * | Object                                                                 | M                       |\n * | Buffer, File, Blob, ArrayBuffer, DataView, and JavaScript typed arrays | B                       |\n *\n * ## Support for Sets\n *\n * The `DocumentClient` offers a convenient way to create sets from\n * JavaScript Arrays. The type of set is inferred from the first element\n * in the array. DynamoDB supports string, number, and binary sets. To\n * learn more about supported types see the\n * [Amazon DynamoDB Data Model Documentation](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)\n * For more information see {AWS.DynamoDB.DocumentClient.createSet}\n *\n */\nAWS.DynamoDB.DocumentClient = AWS.util.inherit({\n  /**\n   * Creates a DynamoDB document client with a set of configuration options.\n   *\n   * @option options params [map] An optional map of parameters to bind to every\n   *   request sent by this service object.\n   * @option options service [AWS.DynamoDB] An optional pre-configured instance\n   *  of the AWS.DynamoDB service object. This instance's config will be\n   *  copied to a new instance used by this client. You should not need to\n   *  retain a reference to the input object, and may destroy it or allow it\n   *  to be garbage collected.\n   * @option options convertEmptyValues [Boolean] set to true if you would like\n   *  the document client to convert empty values (0-length strings, binary\n   *  buffers, and sets) to be converted to NULL types when persisting to\n   *  DynamoDB.\n   * @option options wrapNumbers [Boolean] Set to true to return numbers as a\n   *  NumberValue object instead of converting them to native JavaScript numbers.\n   *  This allows for the safe round-trip transport of numbers of arbitrary size.\n   * @see AWS.DynamoDB.constructor\n   *\n   */\n  constructor: function DocumentClient(options) {\n    var self = this;\n    self.options = options || {};\n    self.configure(self.options);\n  },\n  /**\n   * @api private\n   */\n  configure: function configure(options) {\n    var self = this;\n    self.service = options.service;\n    self.bindServiceObject(options);\n    self.attrValue = options.attrValue = self.service.api.operations.putItem.input.members.Item.value.shape;\n  },\n  /**\n   * @api private\n   */\n  bindServiceObject: function bindServiceObject(options) {\n    var self = this;\n    options = options || {};\n    if (!self.service) {\n      self.service = new AWS.DynamoDB(options);\n    } else {\n      var config = AWS.util.copy(self.service.config);\n      self.service = new self.service.constructor.__super__(config);\n      self.service.config.params = AWS.util.merge(self.service.config.params || {}, options.params);\n    }\n  },\n  /**\n   * @api private\n   */\n  makeServiceRequest: function (operation, params, callback) {\n    var self = this;\n    var request = self.service[operation](params);\n    self.setupRequest(request);\n    self.setupResponse(request);\n    if (typeof callback === 'function') {\n      request.send(callback);\n    }\n    return request;\n  },\n  /**\n   * @api private\n   */\n  serviceClientOperationsMap: {\n    batchGet: 'batchGetItem',\n    batchWrite: 'batchWriteItem',\n    delete: 'deleteItem',\n    get: 'getItem',\n    put: 'putItem',\n    query: 'query',\n    scan: 'scan',\n    update: 'updateItem',\n    transactGet: 'transactGetItems',\n    transactWrite: 'transactWriteItems'\n  },\n  /**\n   * Returns the attributes of one or more items from one or more tables\n   * by delegating to `AWS.DynamoDB.batchGetItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.batchGetItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.batchGetItem\n   * @example Get items from multiple tables\n   *  var params = {\n   *    RequestItems: {\n   *      'Table-1': {\n   *        Keys: [\n   *          {\n   *             HashKey: 'haskey',\n   *             NumberRangeKey: 1\n   *          }\n   *        ]\n   *      },\n   *      'Table-2': {\n   *        Keys: [\n   *          { foo: 'bar' },\n   *        ]\n   *      }\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.batchGet(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  batchGet: function (params, callback) {\n    var operation = this.serviceClientOperationsMap['batchGet'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n  /**\n   * Puts or deletes multiple items in one or more tables by delegating\n   * to `AWS.DynamoDB.batchWriteItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.batchWriteItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.batchWriteItem\n   * @example Write to and delete from a table\n   *  var params = {\n   *    RequestItems: {\n   *      'Table-1': [\n   *        {\n   *          DeleteRequest: {\n   *            Key: { HashKey: 'someKey' }\n   *          }\n   *        },\n   *        {\n   *          PutRequest: {\n   *            Item: {\n   *              HashKey: 'anotherKey',\n   *              NumAttribute: 1,\n   *              BoolAttribute: true,\n   *              ListAttribute: [1, 'two', false],\n   *              MapAttribute: { foo: 'bar' }\n   *            }\n   *          }\n   *        }\n   *      ]\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.batchWrite(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  batchWrite: function (params, callback) {\n    var operation = this.serviceClientOperationsMap['batchWrite'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n  /**\n   * Deletes a single item in a table by primary key by delegating to\n   * `AWS.DynamoDB.deleteItem()`\n   *\n   * Supply the same parameters as {AWS.DynamoDB.deleteItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.deleteItem\n   * @example Delete an item from a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Key: {\n   *      HashKey: 'hashkey',\n   *      NumberRangeKey: 1\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.delete(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  delete: function (params, callback) {\n    var operation = this.serviceClientOperationsMap['delete'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n  /**\n   * Returns a set of attributes for the item with the given primary key\n   * by delegating to `AWS.DynamoDB.getItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.getItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.getItem\n   * @example Get an item from a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Key: {\n   *      HashKey: 'hashkey'\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.get(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  get: function (params, callback) {\n    var operation = this.serviceClientOperationsMap['get'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n  /**\n   * Creates a new item, or replaces an old item with a new item by\n   * delegating to `AWS.DynamoDB.putItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.putItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.putItem\n   * @example Create a new item in a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Item: {\n   *       HashKey: 'haskey',\n   *       NumAttribute: 1,\n   *       BoolAttribute: true,\n   *       ListAttribute: [1, 'two', false],\n   *       MapAttribute: { foo: 'bar'},\n   *       NullAttribute: null\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.put(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  put: function (params, callback) {\n    var operation = this.serviceClientOperationsMap['put'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n  /**\n   * Edits an existing item's attributes, or adds a new item to the table if\n   * it does not already exist by delegating to `AWS.DynamoDB.updateItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.updateItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.updateItem\n   * @example Update an item with expressions\n   *  var params = {\n   *    TableName: 'Table',\n   *    Key: { HashKey : 'hashkey' },\n   *    UpdateExpression: 'set #a = :x + :y',\n   *    ConditionExpression: '#a < :MAX',\n   *    ExpressionAttributeNames: {'#a' : 'Sum'},\n   *    ExpressionAttributeValues: {\n   *      ':x' : 20,\n   *      ':y' : 45,\n   *      ':MAX' : 100,\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.update(params, function(err, data) {\n   *     if (err) console.log(err);\n   *     else console.log(data);\n   *  });\n   *\n   */\n  update: function (params, callback) {\n    var operation = this.serviceClientOperationsMap['update'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n  /**\n   * Returns one or more items and item attributes by accessing every item\n   * in a table or a secondary index.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.scan} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.scan\n   * @example Scan the table with a filter expression\n   *  var params = {\n   *    TableName : 'Table',\n   *    FilterExpression : 'Year = :this_year',\n   *    ExpressionAttributeValues : {':this_year' : 2015}\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.scan(params, function(err, data) {\n   *     if (err) console.log(err);\n   *     else console.log(data);\n   *  });\n   *\n   */\n  scan: function (params, callback) {\n    var operation = this.serviceClientOperationsMap['scan'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n  /**\n   * Directly access items from a table by primary key or a secondary index.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.query} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.query\n   * @example Query an index\n   *  var params = {\n   *    TableName: 'Table',\n   *    IndexName: 'Index',\n   *    KeyConditionExpression: 'HashKey = :hkey and RangeKey > :rkey',\n   *    ExpressionAttributeValues: {\n   *      ':hkey': 'key',\n   *      ':rkey': 2015\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.query(params, function(err, data) {\n   *     if (err) console.log(err);\n   *     else console.log(data);\n   *  });\n   *\n   */\n  query: function (params, callback) {\n    var operation = this.serviceClientOperationsMap['query'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n  /**\n   * Synchronous write operation that groups up to 100 action requests.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.transactWriteItems} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.transactWriteItems\n   * @example Get items from multiple tables\n   *  var params = {\n   *    TransactItems: [{\n   *      Put: {\n   *        TableName : 'Table0',\n   *        Item: {\n   *          HashKey: 'haskey',\n   *          NumAttribute: 1,\n   *          BoolAttribute: true,\n   *          ListAttribute: [1, 'two', false],\n   *          MapAttribute: { foo: 'bar'},\n   *          NullAttribute: null\n   *        }\n   *      }\n   *    }, {\n   *      Update: {\n   *        TableName: 'Table1',\n   *        Key: { HashKey : 'hashkey' },\n   *        UpdateExpression: 'set #a = :x + :y',\n   *        ConditionExpression: '#a < :MAX',\n   *        ExpressionAttributeNames: {'#a' : 'Sum'},\n   *        ExpressionAttributeValues: {\n   *          ':x' : 20,\n   *          ':y' : 45,\n   *          ':MAX' : 100,\n   *        }\n   *      }\n   *    }]\n   *  };\n   *\n   *  documentClient.transactWrite(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   */\n  transactWrite: function (params, callback) {\n    var operation = this.serviceClientOperationsMap['transactWrite'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n  /**\n   * Atomically retrieves multiple items from one or more tables (but not from indexes)\n   * in a single account and region.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.transactGetItems} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.transactGetItems\n   * @example Get items from multiple tables\n   *  var params = {\n   *    TransactItems: [{\n   *      Get: {\n   *        TableName : 'Table0',\n   *        Key: {\n   *          HashKey: 'hashkey0'\n   *        }\n   *      }\n   *    }, {\n   *      Get: {\n   *        TableName : 'Table1',\n   *        Key: {\n   *          HashKey: 'hashkey1'\n   *        }\n   *      }\n   *    }]\n   *  };\n   *\n   *  documentClient.transactGet(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   */\n  transactGet: function (params, callback) {\n    var operation = this.serviceClientOperationsMap['transactGet'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n  /**\n   * Creates a set of elements inferring the type of set from\n   * the type of the first element. Amazon DynamoDB currently supports\n   * the number sets, string sets, and binary sets. For more information\n   * about DynamoDB data types see the documentation on the\n   * [Amazon DynamoDB Data Model](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModel.DataTypes).\n   *\n   * @param list [Array] Collection to represent your DynamoDB Set\n   * @param options [map]\n   *  * **validate** [Boolean] set to true if you want to validate the type\n   *    of each element in the set. Defaults to `false`.\n   * @example Creating a number set\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  var params = {\n   *    Item: {\n   *      hashkey: 'hashkey'\n   *      numbers: documentClient.createSet([1, 2, 3]);\n   *    }\n   *  };\n   *\n   *  documentClient.put(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  createSet: function (list, options) {\n    options = options || {};\n    return new DynamoDBSet(list, options);\n  },\n  /**\n   * @api private\n   */\n  getTranslator: function () {\n    return new Translator(this.options);\n  },\n  /**\n   * @api private\n   */\n  setupRequest: function setupRequest(request) {\n    var self = this;\n    var translator = self.getTranslator();\n    var operation = request.operation;\n    var inputShape = request.service.api.operations[operation].input;\n    request._events.validate.unshift(function (req) {\n      req.rawParams = AWS.util.copy(req.params);\n      req.params = translator.translateInput(req.rawParams, inputShape);\n    });\n  },\n  /**\n   * @api private\n   */\n  setupResponse: function setupResponse(request) {\n    var self = this;\n    var translator = self.getTranslator();\n    var outputShape = self.service.api.operations[request.operation].output;\n    request.on('extractData', function (response) {\n      response.data = translator.translateOutput(response.data, outputShape);\n    });\n    var response = request.response;\n    response.nextPage = function (cb) {\n      var resp = this;\n      var req = resp.request;\n      var config;\n      var service = req.service;\n      var operation = req.operation;\n      try {\n        config = service.paginationConfig(operation, true);\n      } catch (e) {\n        resp.error = e;\n      }\n      if (!resp.hasNextPage()) {\n        if (cb) cb(resp.error, null);else if (resp.error) throw resp.error;\n        return null;\n      }\n      var params = AWS.util.copy(req.rawParams);\n      if (!resp.nextPageTokens) {\n        return cb ? cb(null, null) : null;\n      } else {\n        var inputTokens = config.inputToken;\n        if (typeof inputTokens === 'string') inputTokens = [inputTokens];\n        for (var i = 0; i < inputTokens.length; i++) {\n          params[inputTokens[i]] = resp.nextPageTokens[i];\n        }\n        return self[operation](params, cb);\n      }\n    };\n  }\n});\n\n/**\n * @api private\n */\nmodule.exports = AWS.DynamoDB.DocumentClient;","map":{"version":3,"names":["AWS","require","Translator","DynamoDBSet","DynamoDB","DocumentClient","util","inherit","constructor","options","self","configure","service","bindServiceObject","attrValue","api","operations","putItem","input","members","Item","value","shape","config","copy","__super__","params","merge","makeServiceRequest","operation","callback","request","setupRequest","setupResponse","send","serviceClientOperationsMap","batchGet","batchWrite","delete","get","put","query","scan","update","transactGet","transactWrite","createSet","list","getTranslator","translator","inputShape","_events","validate","unshift","req","rawParams","translateInput","outputShape","output","on","response","data","translateOutput","nextPage","cb","resp","paginationConfig","e","error","hasNextPage","nextPageTokens","inputTokens","inputToken","i","length","module","exports"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/dynamodb/document_client.js"],"sourcesContent":["var AWS = require('../core');\nvar Translator = require('./translator');\nvar DynamoDBSet = require('./set');\n\n/**\n * The document client simplifies working with items in Amazon DynamoDB\n * by abstracting away the notion of attribute values. This abstraction\n * annotates native JavaScript types supplied as input parameters, as well\n * as converts annotated response data to native JavaScript types.\n *\n * ## Marshalling Input and Unmarshalling Response Data\n *\n * The document client affords developers the use of native JavaScript types\n * instead of `AttributeValue`s to simplify the JavaScript development\n * experience with Amazon DynamoDB. JavaScript objects passed in as parameters\n * are marshalled into `AttributeValue` shapes required by Amazon DynamoDB.\n * Responses from DynamoDB are unmarshalled into plain JavaScript objects\n * by the `DocumentClient`. The `DocumentClient`, does not accept\n * `AttributeValue`s in favor of native JavaScript types.\n *\n * |                             JavaScript Type                            | DynamoDB AttributeValue |\n * |:----------------------------------------------------------------------:|-------------------------|\n * | String                                                                 | S                       |\n * | Number                                                                 | N                       |\n * | Boolean                                                                | BOOL                    |\n * | null                                                                   | NULL                    |\n * | Array                                                                  | L                       |\n * | Object                                                                 | M                       |\n * | Buffer, File, Blob, ArrayBuffer, DataView, and JavaScript typed arrays | B                       |\n *\n * ## Support for Sets\n *\n * The `DocumentClient` offers a convenient way to create sets from\n * JavaScript Arrays. The type of set is inferred from the first element\n * in the array. DynamoDB supports string, number, and binary sets. To\n * learn more about supported types see the\n * [Amazon DynamoDB Data Model Documentation](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)\n * For more information see {AWS.DynamoDB.DocumentClient.createSet}\n *\n */\nAWS.DynamoDB.DocumentClient = AWS.util.inherit({\n\n  /**\n   * Creates a DynamoDB document client with a set of configuration options.\n   *\n   * @option options params [map] An optional map of parameters to bind to every\n   *   request sent by this service object.\n   * @option options service [AWS.DynamoDB] An optional pre-configured instance\n   *  of the AWS.DynamoDB service object. This instance's config will be\n   *  copied to a new instance used by this client. You should not need to\n   *  retain a reference to the input object, and may destroy it or allow it\n   *  to be garbage collected.\n   * @option options convertEmptyValues [Boolean] set to true if you would like\n   *  the document client to convert empty values (0-length strings, binary\n   *  buffers, and sets) to be converted to NULL types when persisting to\n   *  DynamoDB.\n   * @option options wrapNumbers [Boolean] Set to true to return numbers as a\n   *  NumberValue object instead of converting them to native JavaScript numbers.\n   *  This allows for the safe round-trip transport of numbers of arbitrary size.\n   * @see AWS.DynamoDB.constructor\n   *\n   */\n  constructor: function DocumentClient(options) {\n    var self = this;\n    self.options = options || {};\n    self.configure(self.options);\n  },\n\n  /**\n   * @api private\n   */\n  configure: function configure(options) {\n    var self = this;\n    self.service = options.service;\n    self.bindServiceObject(options);\n    self.attrValue = options.attrValue =\n      self.service.api.operations.putItem.input.members.Item.value.shape;\n  },\n\n  /**\n   * @api private\n   */\n  bindServiceObject: function bindServiceObject(options) {\n    var self = this;\n    options = options || {};\n\n    if (!self.service) {\n      self.service = new AWS.DynamoDB(options);\n    } else {\n      var config = AWS.util.copy(self.service.config);\n      self.service = new self.service.constructor.__super__(config);\n      self.service.config.params =\n        AWS.util.merge(self.service.config.params || {}, options.params);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  makeServiceRequest: function(operation, params, callback) {\n    var self = this;\n    var request = self.service[operation](params);\n    self.setupRequest(request);\n    self.setupResponse(request);\n    if (typeof callback === 'function') {\n      request.send(callback);\n    }\n    return request;\n  },\n\n  /**\n   * @api private\n   */\n  serviceClientOperationsMap: {\n    batchGet: 'batchGetItem',\n    batchWrite: 'batchWriteItem',\n    delete: 'deleteItem',\n    get: 'getItem',\n    put: 'putItem',\n    query: 'query',\n    scan: 'scan',\n    update: 'updateItem',\n    transactGet: 'transactGetItems',\n    transactWrite: 'transactWriteItems'\n  },\n\n  /**\n   * Returns the attributes of one or more items from one or more tables\n   * by delegating to `AWS.DynamoDB.batchGetItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.batchGetItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.batchGetItem\n   * @example Get items from multiple tables\n   *  var params = {\n   *    RequestItems: {\n   *      'Table-1': {\n   *        Keys: [\n   *          {\n   *             HashKey: 'haskey',\n   *             NumberRangeKey: 1\n   *          }\n   *        ]\n   *      },\n   *      'Table-2': {\n   *        Keys: [\n   *          { foo: 'bar' },\n   *        ]\n   *      }\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.batchGet(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  batchGet: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['batchGet'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Puts or deletes multiple items in one or more tables by delegating\n   * to `AWS.DynamoDB.batchWriteItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.batchWriteItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.batchWriteItem\n   * @example Write to and delete from a table\n   *  var params = {\n   *    RequestItems: {\n   *      'Table-1': [\n   *        {\n   *          DeleteRequest: {\n   *            Key: { HashKey: 'someKey' }\n   *          }\n   *        },\n   *        {\n   *          PutRequest: {\n   *            Item: {\n   *              HashKey: 'anotherKey',\n   *              NumAttribute: 1,\n   *              BoolAttribute: true,\n   *              ListAttribute: [1, 'two', false],\n   *              MapAttribute: { foo: 'bar' }\n   *            }\n   *          }\n   *        }\n   *      ]\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.batchWrite(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  batchWrite: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['batchWrite'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Deletes a single item in a table by primary key by delegating to\n   * `AWS.DynamoDB.deleteItem()`\n   *\n   * Supply the same parameters as {AWS.DynamoDB.deleteItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.deleteItem\n   * @example Delete an item from a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Key: {\n   *      HashKey: 'hashkey',\n   *      NumberRangeKey: 1\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.delete(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  delete: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['delete'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Returns a set of attributes for the item with the given primary key\n   * by delegating to `AWS.DynamoDB.getItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.getItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.getItem\n   * @example Get an item from a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Key: {\n   *      HashKey: 'hashkey'\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.get(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  get: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['get'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Creates a new item, or replaces an old item with a new item by\n   * delegating to `AWS.DynamoDB.putItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.putItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.putItem\n   * @example Create a new item in a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Item: {\n   *       HashKey: 'haskey',\n   *       NumAttribute: 1,\n   *       BoolAttribute: true,\n   *       ListAttribute: [1, 'two', false],\n   *       MapAttribute: { foo: 'bar'},\n   *       NullAttribute: null\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.put(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  put: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['put'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Edits an existing item's attributes, or adds a new item to the table if\n   * it does not already exist by delegating to `AWS.DynamoDB.updateItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.updateItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.updateItem\n   * @example Update an item with expressions\n   *  var params = {\n   *    TableName: 'Table',\n   *    Key: { HashKey : 'hashkey' },\n   *    UpdateExpression: 'set #a = :x + :y',\n   *    ConditionExpression: '#a < :MAX',\n   *    ExpressionAttributeNames: {'#a' : 'Sum'},\n   *    ExpressionAttributeValues: {\n   *      ':x' : 20,\n   *      ':y' : 45,\n   *      ':MAX' : 100,\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.update(params, function(err, data) {\n   *     if (err) console.log(err);\n   *     else console.log(data);\n   *  });\n   *\n   */\n  update: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['update'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Returns one or more items and item attributes by accessing every item\n   * in a table or a secondary index.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.scan} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.scan\n   * @example Scan the table with a filter expression\n   *  var params = {\n   *    TableName : 'Table',\n   *    FilterExpression : 'Year = :this_year',\n   *    ExpressionAttributeValues : {':this_year' : 2015}\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.scan(params, function(err, data) {\n   *     if (err) console.log(err);\n   *     else console.log(data);\n   *  });\n   *\n   */\n  scan: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['scan'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n   /**\n    * Directly access items from a table by primary key or a secondary index.\n    *\n    * Supply the same parameters as {AWS.DynamoDB.query} with\n    * `AttributeValue`s substituted by native JavaScript types.\n    *\n    * @see AWS.DynamoDB.query\n    * @example Query an index\n    *  var params = {\n    *    TableName: 'Table',\n    *    IndexName: 'Index',\n    *    KeyConditionExpression: 'HashKey = :hkey and RangeKey > :rkey',\n    *    ExpressionAttributeValues: {\n    *      ':hkey': 'key',\n    *      ':rkey': 2015\n    *    }\n    *  };\n    *\n    *  var documentClient = new AWS.DynamoDB.DocumentClient();\n    *\n    *  documentClient.query(params, function(err, data) {\n    *     if (err) console.log(err);\n    *     else console.log(data);\n    *  });\n    *\n    */\n  query: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['query'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Synchronous write operation that groups up to 100 action requests.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.transactWriteItems} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.transactWriteItems\n   * @example Get items from multiple tables\n   *  var params = {\n   *    TransactItems: [{\n   *      Put: {\n   *        TableName : 'Table0',\n   *        Item: {\n   *          HashKey: 'haskey',\n   *          NumAttribute: 1,\n   *          BoolAttribute: true,\n   *          ListAttribute: [1, 'two', false],\n   *          MapAttribute: { foo: 'bar'},\n   *          NullAttribute: null\n   *        }\n   *      }\n   *    }, {\n   *      Update: {\n   *        TableName: 'Table1',\n   *        Key: { HashKey : 'hashkey' },\n   *        UpdateExpression: 'set #a = :x + :y',\n   *        ConditionExpression: '#a < :MAX',\n   *        ExpressionAttributeNames: {'#a' : 'Sum'},\n   *        ExpressionAttributeValues: {\n   *          ':x' : 20,\n   *          ':y' : 45,\n   *          ':MAX' : 100,\n   *        }\n   *      }\n   *    }]\n   *  };\n   *\n   *  documentClient.transactWrite(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   */\n  transactWrite: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['transactWrite'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Atomically retrieves multiple items from one or more tables (but not from indexes)\n   * in a single account and region.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.transactGetItems} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.transactGetItems\n   * @example Get items from multiple tables\n   *  var params = {\n   *    TransactItems: [{\n   *      Get: {\n   *        TableName : 'Table0',\n   *        Key: {\n   *          HashKey: 'hashkey0'\n   *        }\n   *      }\n   *    }, {\n   *      Get: {\n   *        TableName : 'Table1',\n   *        Key: {\n   *          HashKey: 'hashkey1'\n   *        }\n   *      }\n   *    }]\n   *  };\n   *\n   *  documentClient.transactGet(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   */\n  transactGet: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['transactGet'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Creates a set of elements inferring the type of set from\n   * the type of the first element. Amazon DynamoDB currently supports\n   * the number sets, string sets, and binary sets. For more information\n   * about DynamoDB data types see the documentation on the\n   * [Amazon DynamoDB Data Model](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModel.DataTypes).\n   *\n   * @param list [Array] Collection to represent your DynamoDB Set\n   * @param options [map]\n   *  * **validate** [Boolean] set to true if you want to validate the type\n   *    of each element in the set. Defaults to `false`.\n   * @example Creating a number set\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  var params = {\n   *    Item: {\n   *      hashkey: 'hashkey'\n   *      numbers: documentClient.createSet([1, 2, 3]);\n   *    }\n   *  };\n   *\n   *  documentClient.put(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  createSet: function(list, options) {\n    options = options || {};\n    return new DynamoDBSet(list, options);\n  },\n\n  /**\n   * @api private\n   */\n  getTranslator: function() {\n    return new Translator(this.options);\n  },\n\n  /**\n   * @api private\n   */\n  setupRequest: function setupRequest(request) {\n    var self = this;\n    var translator = self.getTranslator();\n    var operation = request.operation;\n    var inputShape = request.service.api.operations[operation].input;\n    request._events.validate.unshift(function(req) {\n      req.rawParams = AWS.util.copy(req.params);\n      req.params = translator.translateInput(req.rawParams, inputShape);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  setupResponse: function setupResponse(request) {\n    var self = this;\n    var translator = self.getTranslator();\n    var outputShape = self.service.api.operations[request.operation].output;\n    request.on('extractData', function(response) {\n      response.data = translator.translateOutput(response.data, outputShape);\n    });\n\n    var response = request.response;\n    response.nextPage = function(cb) {\n      var resp = this;\n      var req = resp.request;\n      var config;\n      var service = req.service;\n      var operation = req.operation;\n      try {\n        config = service.paginationConfig(operation, true);\n      } catch (e) { resp.error = e; }\n\n      if (!resp.hasNextPage()) {\n        if (cb) cb(resp.error, null);\n        else if (resp.error) throw resp.error;\n        return null;\n      }\n\n      var params = AWS.util.copy(req.rawParams);\n      if (!resp.nextPageTokens) {\n        return cb ? cb(null, null) : null;\n      } else {\n        var inputTokens = config.inputToken;\n        if (typeof inputTokens === 'string') inputTokens = [inputTokens];\n        for (var i = 0; i < inputTokens.length; i++) {\n          params[inputTokens[i]] = resp.nextPageTokens[i];\n        }\n        return self[operation](params, cb);\n      }\n    };\n  }\n\n});\n\n/**\n * @api private\n */\nmodule.exports = AWS.DynamoDB.DocumentClient;\n"],"mappings":"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ACA;AACA;AACA;EACET,QAAQ,EAAE,SAAAA,CAASV,MAAM,EAAEI,QAAQ,EAAE;IACnC,IAAID,SAAS,GAAG,IAAI,CAACM,0BAA0B,CAAC,UAAU,CAAC;IAC3D,OAAO,IAAI,CAACP,kBAAkB,CAACC,SAAS,EAAEH,MAAM,EAAEI,QAAQ,CAAC;EAC7D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,UAAU,EAAE,SAAAA,CAASX,MAAM,EAAEI,QAAQ,EAAE;IACrC,IAAID,SAAS,GAAG,IAAI,CAACM,0BAA0B,CAAC,YAAY,CAAC;IAC7D,OAAO,IAAI,CAACP,kBAAkB,CAACC,SAAS,EAAEH,MAAM,EAAEI,QAAQ,CAAC;EAC7D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,MAAM,EAAE,SAAAA,CAASZ,MAAM,EAAEI,QAAQ,EAAE;IACjC,IAAID,SAAS,GAAG,IAAI,CAACM,0BAA0B,CAAC,QAAQ,CAAC;IACzD,OAAO,IAAI,CAACP,kBAAkB,CAACC,SAAS,EAAEH,MAAM,EAAEI,QAAQ,CAAC;EAC7D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,GAAG,EAAE,SAAAA,CAASb,MAAM,EAAEI,QAAQ,EAAE;IAC9B,IAAID,SAAS,GAAG,IAAI,CAACM,0BAA0B,CAAC,KAAK,CAAC;IACtD,OAAO,IAAI,CAACP,kBAAkB,CAACC,SAAS,EAAEH,MAAM,EAAEI,QAAQ,CAAC;EAC7D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEU,GAAG,EAAE,SAAAA,CAASd,MAAM,EAAEI,QAAQ,EAAE;IAC9B,IAAID,SAAS,GAAG,IAAI,CAACM,0BAA0B,CAAC,KAAK,CAAC;IACtD,OAAO,IAAI,CAACP,kBAAkB,CAACC,SAAS,EAAEH,MAAM,EAAEI,QAAQ,CAAC;EAC7D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEa,MAAM,EAAE,SAAAA,CAASjB,MAAM,EAAEI,QAAQ,EAAE;IACjC,IAAID,SAAS,GAAG,IAAI,CAACM,0BAA0B,CAAC,QAAQ,CAAC;IACzD,OAAO,IAAI,CAACP,kBAAkB,CAACC,SAAS,EAAEH,MAAM,EAAEI,QAAQ,CAAC;EAC7D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEY,IAAI,EAAE,SAAAA,CAAShB,MAAM,EAAEI,QAAQ,EAAE;IAC/B,IAAID,SAAS,GAAG,IAAI,CAACM,0BAA0B,CAAC,MAAM,CAAC;IACvD,OAAO,IAAI,CAACP,kBAAkB,CAACC,SAAS,EAAEH,MAAM,EAAEI,QAAQ,CAAC;EAC7D,CAAC;EAEA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEW,KAAK,EAAE,SAAAA,CAASf,MAAM,EAAEI,QAAQ,EAAE;IAChC,IAAID,SAAS,GAAG,IAAI,CAACM,0BAA0B,CAAC,OAAO,CAAC;IACxD,OAAO,IAAI,CAACP,kBAAkB,CAACC,SAAS,EAAEH,MAAM,EAAEI,QAAQ,CAAC;EAC7D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEe,aAAa,EAAE,SAAAA,CAASnB,MAAM,EAAEI,QAAQ,EAAE;IACxC,IAAID,SAAS,GAAG,IAAI,CAACM,0BAA0B,CAAC,eAAe,CAAC;IAChE,OAAO,IAAI,CAACP,kBAAkB,CAACC,SAAS,EAAEH,MAAM,EAAEI,QAAQ,CAAC;EAC7D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,WAAW,EAAE,SAAAA,CAASlB,MAAM,EAAEI,QAAQ,EAAE;IACtC,IAAID,SAAS,GAAG,IAAI,CAACM,0BAA0B,CAAC,aAAa,CAAC;IAC9D,OAAO,IAAI,CAACP,kBAAkB,CAACC,SAAS,EAAEH,MAAM,EAAEI,QAAQ,CAAC;EAC7D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgB,SAAS,EAAE,SAAAA,CAASC,IAAI,EAAEtC,OAAO,EAAE;IACjCA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,OAAO,IAAIN,WAAW,CAAC4C,IAAI,EAAEtC,OAAO,CAAC;EACvC,CAAC;EAED;AACF;AACA;EACEuC,aAAa,EAAE,SAAAA,CAAA,EAAW;IACxB,OAAO,IAAI9C,UAAU,CAAC,IAAI,CAACO,OAAO,CAAC;EACrC,CAAC;EAED;AACF;AAC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"},"metadata":{},"sourceType":"script","externalDependencies":[]}