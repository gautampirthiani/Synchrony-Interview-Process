{"ast":null,"code":"var AWS = require('../core');\nrequire('../dynamodb/document_client');\nAWS.util.update(AWS.DynamoDB.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    if (request.service.config.dynamoDbCrc32) {\n      request.removeListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);\n      request.addListener('extractData', this.checkCrc32);\n      request.addListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);\n    }\n  },\n  /**\n   * @api private\n   */\n  checkCrc32: function checkCrc32(resp) {\n    if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {\n      resp.data = null;\n      resp.error = AWS.util.error(new Error(), {\n        code: 'CRC32CheckFailed',\n        message: 'CRC32 integrity check failed',\n        retryable: true\n      });\n      resp.request.haltHandlersOnError();\n      throw resp.error;\n    }\n  },\n  /**\n   * @api private\n   */\n  crc32IsValid: function crc32IsValid(resp) {\n    var crc = resp.httpResponse.headers['x-amz-crc32'];\n    if (!crc) return true; // no (valid) CRC32 header\n    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);\n  },\n  /**\n   * @api private\n   */\n  defaultRetryCount: 10,\n  /**\n   * @api private\n   */\n  retryDelays: function retryDelays(retryCount, err) {\n    var retryDelayOptions = AWS.util.copy(this.config.retryDelayOptions);\n    if (typeof retryDelayOptions.base !== 'number') {\n      retryDelayOptions.base = 50; // default for dynamodb\n    }\n\n    var delay = AWS.util.calculateRetryDelay(retryCount, retryDelayOptions, err);\n    return delay;\n  }\n});","map":{"version":3,"names":["AWS","require","util","update","DynamoDB","prototype","setupRequestListeners","request","service","config","dynamoDbCrc32","removeListener","EventListeners","Json","EXTRACT_DATA","addListener","checkCrc32","resp","httpResponse","streaming","crc32IsValid","data","error","Error","code","message","retryable","haltHandlersOnError","crc","headers","parseInt","crypto","crc32","body","defaultRetryCount","retryDelays","retryCount","err","retryDelayOptions","copy","base","delay","calculateRetryDelay"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/services/dynamodb.js"],"sourcesContent":["var AWS = require('../core');\nrequire('../dynamodb/document_client');\n\nAWS.util.update(AWS.DynamoDB.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    if (request.service.config.dynamoDbCrc32) {\n      request.removeListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);\n      request.addListener('extractData', this.checkCrc32);\n      request.addListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  checkCrc32: function checkCrc32(resp) {\n    if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {\n      resp.data = null;\n      resp.error = AWS.util.error(new Error(), {\n        code: 'CRC32CheckFailed',\n        message: 'CRC32 integrity check failed',\n        retryable: true\n      });\n      resp.request.haltHandlersOnError();\n      throw (resp.error);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  crc32IsValid: function crc32IsValid(resp) {\n    var crc = resp.httpResponse.headers['x-amz-crc32'];\n    if (!crc) return true; // no (valid) CRC32 header\n    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);\n  },\n\n  /**\n   * @api private\n   */\n  defaultRetryCount: 10,\n\n  /**\n   * @api private\n   */\n  retryDelays: function retryDelays(retryCount, err) {\n    var retryDelayOptions = AWS.util.copy(this.config.retryDelayOptions);\n\n    if (typeof retryDelayOptions.base !== 'number') {\n        retryDelayOptions.base = 50; // default for dynamodb\n    }\n    var delay = AWS.util.calculateRetryDelay(retryCount, retryDelayOptions, err);\n    return delay;\n  }\n});\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC5BA,OAAO,CAAC,6BAA6B,CAAC;AAEtCD,GAAG,CAACE,IAAI,CAACC,MAAM,CAACH,GAAG,CAACI,QAAQ,CAACC,SAAS,EAAE;EACtC;AACF;AACA;EACEC,qBAAqB,EAAE,SAASA,qBAAqBA,CAACC,OAAO,EAAE;IAC7D,IAAIA,OAAO,CAACC,OAAO,CAACC,MAAM,CAACC,aAAa,EAAE;MACxCH,OAAO,CAACI,cAAc,CAAC,aAAa,EAAEX,GAAG,CAACY,cAAc,CAACC,IAAI,CAACC,YAAY,CAAC;MAC3EP,OAAO,CAACQ,WAAW,CAAC,aAAa,EAAE,IAAI,CAACC,UAAU,CAAC;MACnDT,OAAO,CAACQ,WAAW,CAAC,aAAa,EAAEf,GAAG,CAACY,cAAc,CAACC,IAAI,CAACC,YAAY,CAAC;IAC1E;EACF,CAAC;EAED;AACF;AACA;EACEE,UAAU,EAAE,SAASA,UAAUA,CAACC,IAAI,EAAE;IACpC,IAAI,CAACA,IAAI,CAACC,YAAY,CAACC,SAAS,IAAI,CAACF,IAAI,CAACV,OAAO,CAACC,OAAO,CAACY,YAAY,CAACH,IAAI,CAAC,EAAE;MAC5EA,IAAI,CAACI,IAAI,GAAG,IAAI;MAChBJ,IAAI,CAACK,KAAK,GAAGtB,GAAG,CAACE,IAAI,CAACoB,KAAK,CAAC,IAAIC,KAAK,CAAC,CAAC,EAAE;QACvCC,IAAI,EAAE,kBAAkB;QACxBC,OAAO,EAAE,8BAA8B;QACvCC,SAAS,EAAE;MACb,CAAC,CAAC;MACFT,IAAI,CAACV,OAAO,CAACoB,mBAAmB,CAAC,CAAC;MAClC,MAAOV,IAAI,CAACK,KAAK;IACnB;EACF,CAAC;EAED;AACF;AACA;EACEF,YAAY,EAAE,SAASA,YAAYA,CAACH,IAAI,EAAE;IACxC,IAAIW,GAAG,GAAGX,IAAI,CAACC,YAAY,CAACW,OAAO,CAAC,aAAa,CAAC;IAClD,IAAI,CAACD,GAAG,EAAE,OAAO,IAAI,CAAC,CAAC;IACvB,OAAOE,QAAQ,CAACF,GAAG,EAAE,EAAE,CAAC,KAAK5B,GAAG,CAACE,IAAI,CAAC6B,MAAM,CAACC,KAAK,CAACf,IAAI,CAACC,YAAY,CAACe,IAAI,CAAC;EAC5E,CAAC;EAED;AACF;AACA;EACEC,iBAAiB,EAAE,EAAE;EAErB;AACF;AACA;EACEC,WAAW,EAAE,SAASA,WAAWA,CAACC,UAAU,EAAEC,GAAG,EAAE;IACjD,IAAIC,iBAAiB,GAAGtC,GAAG,CAACE,IAAI,CAACqC,IAAI,CAAC,IAAI,CAAC9B,MAAM,CAAC6B,iBAAiB,CAAC;IAEpE,IAAI,OAAOA,iBAAiB,CAACE,IAAI,KAAK,QAAQ,EAAE;MAC5CF,iBAAiB,CAACE,IAAI,GAAG,EAAE,CAAC,CAAC;IACjC;;IACA,IAAIC,KAAK,GAAGzC,GAAG,CAACE,IAAI,CAACwC,mBAAmB,CAACN,UAAU,EAAEE,iBAAiB,EAAED,GAAG,CAAC;IAC5E,OAAOI,KAAK;EACd;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}