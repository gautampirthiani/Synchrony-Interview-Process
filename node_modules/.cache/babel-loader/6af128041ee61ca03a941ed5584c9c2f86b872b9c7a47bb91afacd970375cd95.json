{"ast":null,"code":"var AWS = require('../core');\nvar rdsutil = {\n  /**\n    * @api private\n    */\n  setupRequestListeners: function setupRequestListeners(service, request, crossRegionOperations) {\n    if (crossRegionOperations.indexOf(request.operation) !== -1 && request.params.SourceRegion) {\n      request.params = AWS.util.copy(request.params);\n      if (request.params.PreSignedUrl || request.params.SourceRegion === service.config.region) {\n        delete request.params.SourceRegion;\n      } else {\n        var doesParamValidation = !!service.config.paramValidation;\n        // remove the validate parameters listener so we can re-add it after we build the URL\n        if (doesParamValidation) {\n          request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n        }\n        request.onAsync('validate', rdsutil.buildCrossRegionPresignedUrl);\n        if (doesParamValidation) {\n          request.addListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n        }\n      }\n    }\n  },\n  /**\n   * @api private\n   */\n  buildCrossRegionPresignedUrl: function buildCrossRegionPresignedUrl(req, done) {\n    var config = AWS.util.copy(req.service.config);\n    config.region = req.params.SourceRegion;\n    delete req.params.SourceRegion;\n    delete config.endpoint;\n    // relevant params for the operation will already be in req.params\n    delete config.params;\n    config.signatureVersion = 'v4';\n    var destinationRegion = req.service.config.region;\n    var svc = new req.service.constructor(config);\n    var newReq = svc[req.operation](AWS.util.copy(req.params));\n    newReq.on('build', function addDestinationRegionParam(request) {\n      var httpRequest = request.httpRequest;\n      httpRequest.params.DestinationRegion = destinationRegion;\n      httpRequest.body = AWS.util.queryParamsToString(httpRequest.params);\n    });\n    newReq.presign(function (err, url) {\n      if (err) done(err);else {\n        req.params.PreSignedUrl = url;\n        done();\n      }\n    });\n  }\n};\n\n/**\n * @api private\n */\nmodule.exports = rdsutil;","map":{"version":3,"names":["AWS","require","rdsutil","setupRequestListeners","service","request","crossRegionOperations","indexOf","operation","params","SourceRegion","util","copy","PreSignedUrl","config","region","doesParamValidation","paramValidation","removeListener","EventListeners","Core","VALIDATE_PARAMETERS","onAsync","buildCrossRegionPresignedUrl","addListener","req","done","endpoint","signatureVersion","destinationRegion","svc","constructor","newReq","on","addDestinationRegionParam","httpRequest","DestinationRegion","body","queryParamsToString","presign","err","url","module","exports"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/services/rdsutil.js"],"sourcesContent":["var AWS = require('../core');\n\nvar rdsutil = {\n  /**\n    * @api private\n    */\n   setupRequestListeners: function setupRequestListeners(service, request, crossRegionOperations) {\n    if (crossRegionOperations.indexOf(request.operation) !== -1 &&\n        request.params.SourceRegion) {\n      request.params = AWS.util.copy(request.params);\n      if (request.params.PreSignedUrl ||\n          request.params.SourceRegion === service.config.region) {\n        delete request.params.SourceRegion;\n      } else {\n        var doesParamValidation = !!service.config.paramValidation;\n        // remove the validate parameters listener so we can re-add it after we build the URL\n        if (doesParamValidation) {\n          request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n        }\n        request.onAsync('validate', rdsutil.buildCrossRegionPresignedUrl);\n        if (doesParamValidation) {\n          request.addListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n        }\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  buildCrossRegionPresignedUrl: function buildCrossRegionPresignedUrl(req, done) {\n    var config = AWS.util.copy(req.service.config);\n    config.region = req.params.SourceRegion;\n    delete req.params.SourceRegion;\n    delete config.endpoint;\n    // relevant params for the operation will already be in req.params\n    delete config.params;\n    config.signatureVersion = 'v4';\n    var destinationRegion = req.service.config.region;\n\n    var svc = new req.service.constructor(config);\n    var newReq = svc[req.operation](AWS.util.copy(req.params));\n    newReq.on('build', function addDestinationRegionParam(request) {\n      var httpRequest = request.httpRequest;\n      httpRequest.params.DestinationRegion = destinationRegion;\n      httpRequest.body = AWS.util.queryParamsToString(httpRequest.params);\n    });\n    newReq.presign(function(err, url) {\n      if (err) done(err);\n      else {\n        req.params.PreSignedUrl = url;\n        done();\n      }\n    });\n  }\n};\n\n/**\n * @api private\n */\nmodule.exports = rdsutil;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}