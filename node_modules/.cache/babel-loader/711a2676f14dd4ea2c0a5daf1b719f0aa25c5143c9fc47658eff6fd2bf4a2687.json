{"ast":null,"code":"var AWS = require('../core');\nvar util = require('../util');\nvar Rest = require('./rest');\nfunction populateBody(req) {\n  var input = req.service.api.operations[req.operation].input;\n  var builder = new AWS.XML.Builder();\n  var params = req.params;\n  var payload = input.payload;\n  if (payload) {\n    var payloadMember = input.members[payload];\n    params = params[payload];\n    if (params === undefined) return;\n    if (payloadMember.type === 'structure') {\n      var rootElement = payloadMember.name;\n      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);\n    } else {\n      // non-xml payload\n      req.httpRequest.body = params;\n    }\n  } else {\n    req.httpRequest.body = builder.toXML(params, input, input.name || input.shape || util.string.upperFirst(req.operation) + 'Request');\n  }\n}\nfunction buildRequest(req) {\n  Rest.buildRequest(req);\n\n  // never send body payload on GET/HEAD\n  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\nfunction extractError(resp) {\n  Rest.extractError(resp);\n  var data;\n  try {\n    data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());\n  } catch (e) {\n    data = {\n      Code: resp.httpResponse.statusCode,\n      Message: resp.httpResponse.statusMessage\n    };\n  }\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\nfunction extractData(resp) {\n  Rest.extractData(resp);\n  var parser;\n  var req = resp.request;\n  var body = resp.httpResponse.body;\n  var operation = req.service.api.operations[req.operation];\n  var output = operation.output;\n  var hasEventOutput = operation.hasEventOutput;\n  var payload = output.payload;\n  if (payload) {\n    var payloadMember = output.members[payload];\n    if (payloadMember.isEventStream) {\n      parser = new AWS.XML.Parser();\n      resp.data[payload] = util.createEventStream(AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : resp.httpResponse.body, parser, payloadMember);\n    } else if (payloadMember.type === 'structure') {\n      parser = new AWS.XML.Parser();\n      resp.data[payload] = parser.parse(body.toString(), payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[payload] = body;\n    } else {\n      resp.data[payload] = payloadMember.toType(body);\n    }\n  } else if (body.length > 0) {\n    parser = new AWS.XML.Parser();\n    var data = parser.parse(body.toString(), output);\n    util.update(resp.data, data);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"names":["AWS","require","util","Rest","populateBody","req","input","service","api","operations","operation","builder","XML","Builder","params","payload","payloadMember","members","undefined","type","rootElement","name","httpRequest","body","toXML","shape","string","upperFirst","buildRequest","indexOf","method","extractError","resp","data","Parser","parse","httpResponse","toString","e","Code","statusCode","Message","statusMessage","Errors","Error","error","code","message","extractData","parser","request","output","hasEventOutput","isEventStream","createEventStream","HttpClient","streamsApiVersion","stream","isStreaming","toType","length","update","module","exports"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/protocol/rest_xml.js"],"sourcesContent":["var AWS = require('../core');\nvar util = require('../util');\nvar Rest = require('./rest');\n\nfunction populateBody(req) {\n  var input = req.service.api.operations[req.operation].input;\n  var builder = new AWS.XML.Builder();\n  var params = req.params;\n\n  var payload = input.payload;\n  if (payload) {\n    var payloadMember = input.members[payload];\n    params = params[payload];\n    if (params === undefined) return;\n\n    if (payloadMember.type === 'structure') {\n      var rootElement = payloadMember.name;\n      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);\n    } else { // non-xml payload\n      req.httpRequest.body = params;\n    }\n  } else {\n    req.httpRequest.body = builder.toXML(params, input, input.name ||\n      input.shape || util.string.upperFirst(req.operation) + 'Request');\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req);\n\n  // never send body payload on GET/HEAD\n  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\n\nfunction extractError(resp) {\n  Rest.extractError(resp);\n\n  var data;\n  try {\n    data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());\n  } catch (e) {\n    data = {\n      Code: resp.httpResponse.statusCode,\n      Message: resp.httpResponse.statusMessage\n    };\n  }\n\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n\n  var parser;\n  var req = resp.request;\n  var body = resp.httpResponse.body;\n  var operation = req.service.api.operations[req.operation];\n  var output = operation.output;\n\n  var hasEventOutput = operation.hasEventOutput;\n\n  var payload = output.payload;\n  if (payload) {\n    var payloadMember = output.members[payload];\n    if (payloadMember.isEventStream) {\n      parser = new AWS.XML.Parser();\n      resp.data[payload] = util.createEventStream(\n        AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : resp.httpResponse.body,\n        parser,\n        payloadMember\n      );\n    } else if (payloadMember.type === 'structure') {\n      parser = new AWS.XML.Parser();\n      resp.data[payload] = parser.parse(body.toString(), payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[payload] = body;\n    } else {\n      resp.data[payload] = payloadMember.toType(body);\n    }\n  } else if (body.length > 0) {\n    parser = new AWS.XML.Parser();\n    var data = parser.parse(body.toString(), output);\n    util.update(resp.data, data);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}