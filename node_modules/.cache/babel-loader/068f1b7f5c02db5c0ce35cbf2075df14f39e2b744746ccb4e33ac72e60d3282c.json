{"ast":null,"code":"var AWS = require('../core');\n\n/**\n * Creates a credential provider chain that searches for AWS credentials\n * in a list of credential providers specified by the {providers} property.\n *\n * By default, the chain will use the {defaultProviders} to resolve credentials.\n * These providers will look in the environment using the\n * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.\n *\n * ## Setting Providers\n *\n * Each provider in the {providers} list should be a function that returns\n * a {AWS.Credentials} object, or a hardcoded credentials object. The function\n * form allows for delayed execution of the credential construction.\n *\n * ## Resolving Credentials from a Chain\n *\n * Call {resolve} to return the first valid credential object that can be\n * loaded by the provider chain.\n *\n * For example, to resolve a chain with a custom provider that checks a file\n * on disk after the set of {defaultProviders}:\n *\n * ```javascript\n * var diskProvider = new AWS.FileSystemCredentials('./creds.json');\n * var chain = new AWS.CredentialProviderChain();\n * chain.providers.push(diskProvider);\n * chain.resolve();\n * ```\n *\n * The above code will return the `diskProvider` object if the\n * file contains credentials and the `defaultProviders` do not contain\n * any credential settings.\n *\n * @!attribute providers\n *   @return [Array<AWS.Credentials, Function>]\n *     a list of credentials objects or functions that return credentials\n *     objects. If the provider is a function, the function will be\n *     executed lazily when the provider needs to be checked for valid\n *     credentials. By default, this object will be set to the\n *     {defaultProviders}.\n *   @see defaultProviders\n */\nAWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new CredentialProviderChain with a default set of providers\n   * specified by {defaultProviders}.\n   */\n  constructor: function CredentialProviderChain(providers) {\n    if (providers) {\n      this.providers = providers;\n    } else {\n      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);\n    }\n    this.resolveCallbacks = [];\n  },\n  /**\n   * @!method  resolvePromise()\n   *   Returns a 'thenable' promise.\n   *   Resolves the provider chain by searching for the first set of\n   *   credentials in {providers}.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @callback fulfilledCallback function(credentials)\n   *     Called if the promise is fulfilled and the provider resolves the chain\n   *     to a credentials object\n   *     @param credentials [AWS.Credentials] the credentials object resolved\n   *       by the provider chain.\n   *   @callback rejectedCallback function(error)\n   *     Called if the promise is rejected.\n   *     @param err [Error] the error object returned if no credentials are found.\n   *   @return [Promise] A promise that represents the state of the `resolve` method call.\n   *   @example Calling the `resolvePromise` method.\n   *     var promise = chain.resolvePromise();\n   *     promise.then(function(credentials) { ... }, function(err) { ... });\n   */\n\n  /**\n   * Resolves the provider chain by searching for the first set of\n   * credentials in {providers}.\n   *\n   * @callback callback function(err, credentials)\n   *   Called when the provider resolves the chain to a credentials object\n   *   or null if no credentials can be found.\n   *\n   *   @param err [Error] the error object returned if no credentials are\n   *     found.\n   *   @param credentials [AWS.Credentials] the credentials object resolved\n   *     by the provider chain.\n   * @return [AWS.CredentialProviderChain] the provider, for chaining.\n   */\n  resolve: function resolve(callback) {\n    var self = this;\n    if (self.providers.length === 0) {\n      callback(new Error('No providers'));\n      return self;\n    }\n    if (self.resolveCallbacks.push(callback) === 1) {\n      var index = 0;\n      var providers = self.providers.slice(0);\n      function resolveNext(err, creds) {\n        if (!err && creds || index === providers.length) {\n          AWS.util.arrayEach(self.resolveCallbacks, function (callback) {\n            callback(err, creds);\n          });\n          self.resolveCallbacks.length = 0;\n          return;\n        }\n        var provider = providers[index++];\n        if (typeof provider === 'function') {\n          creds = provider.call();\n        } else {\n          creds = provider;\n        }\n        if (creds.get) {\n          creds.get(function (getErr) {\n            resolveNext(getErr, getErr ? null : creds);\n          });\n        } else {\n          resolveNext(null, creds);\n        }\n      }\n      resolveNext();\n    }\n    return self;\n  }\n});\n\n/**\n * The default set of providers used by a vanilla CredentialProviderChain.\n *\n * In the browser:\n *\n * ```javascript\n * AWS.CredentialProviderChain.defaultProviders = []\n * ```\n *\n * In Node.js:\n *\n * ```javascript\n * AWS.CredentialProviderChain.defaultProviders = [\n *   function () { return new AWS.EnvironmentCredentials('AWS'); },\n *   function () { return new AWS.EnvironmentCredentials('AMAZON'); },\n *   function () { return new AWS.SsoCredentials(); },\n *   function () { return new AWS.SharedIniFileCredentials(); },\n *   function () { return new AWS.ECSCredentials(); },\n *   function () { return new AWS.ProcessCredentials(); },\n *   function () { return new AWS.TokenFileWebIdentityCredentials(); },\n *   function () { return new AWS.EC2MetadataCredentials() }\n * ]\n * ```\n */\nAWS.CredentialProviderChain.defaultProviders = [];\n\n/**\n * @api private\n */\nAWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);\n};\n\n/**\n * @api private\n */\nAWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.resolvePromise;\n};\nAWS.util.addPromises(AWS.CredentialProviderChain);","map":{"version":3,"names":["AWS","require","CredentialProviderChain","util","inherit","Credentials","constructor","providers","defaultProviders","slice","resolveCallbacks","resolve","callback","self","length","Error","push","index","resolveNext","err","creds","arrayEach","provider","call","get","getErr","addPromisesToClass","PromiseDependency","prototype","resolvePromise","promisifyMethod","deletePromisesFromClass","addPromises"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/credentials/credential_provider_chain.js"],"sourcesContent":["var AWS = require('../core');\n\n/**\n * Creates a credential provider chain that searches for AWS credentials\n * in a list of credential providers specified by the {providers} property.\n *\n * By default, the chain will use the {defaultProviders} to resolve credentials.\n * These providers will look in the environment using the\n * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.\n *\n * ## Setting Providers\n *\n * Each provider in the {providers} list should be a function that returns\n * a {AWS.Credentials} object, or a hardcoded credentials object. The function\n * form allows for delayed execution of the credential construction.\n *\n * ## Resolving Credentials from a Chain\n *\n * Call {resolve} to return the first valid credential object that can be\n * loaded by the provider chain.\n *\n * For example, to resolve a chain with a custom provider that checks a file\n * on disk after the set of {defaultProviders}:\n *\n * ```javascript\n * var diskProvider = new AWS.FileSystemCredentials('./creds.json');\n * var chain = new AWS.CredentialProviderChain();\n * chain.providers.push(diskProvider);\n * chain.resolve();\n * ```\n *\n * The above code will return the `diskProvider` object if the\n * file contains credentials and the `defaultProviders` do not contain\n * any credential settings.\n *\n * @!attribute providers\n *   @return [Array<AWS.Credentials, Function>]\n *     a list of credentials objects or functions that return credentials\n *     objects. If the provider is a function, the function will be\n *     executed lazily when the provider needs to be checked for valid\n *     credentials. By default, this object will be set to the\n *     {defaultProviders}.\n *   @see defaultProviders\n */\nAWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {\n\n  /**\n   * Creates a new CredentialProviderChain with a default set of providers\n   * specified by {defaultProviders}.\n   */\n  constructor: function CredentialProviderChain(providers) {\n    if (providers) {\n      this.providers = providers;\n    } else {\n      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);\n    }\n    this.resolveCallbacks = [];\n  },\n\n  /**\n   * @!method  resolvePromise()\n   *   Returns a 'thenable' promise.\n   *   Resolves the provider chain by searching for the first set of\n   *   credentials in {providers}.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @callback fulfilledCallback function(credentials)\n   *     Called if the promise is fulfilled and the provider resolves the chain\n   *     to a credentials object\n   *     @param credentials [AWS.Credentials] the credentials object resolved\n   *       by the provider chain.\n   *   @callback rejectedCallback function(error)\n   *     Called if the promise is rejected.\n   *     @param err [Error] the error object returned if no credentials are found.\n   *   @return [Promise] A promise that represents the state of the `resolve` method call.\n   *   @example Calling the `resolvePromise` method.\n   *     var promise = chain.resolvePromise();\n   *     promise.then(function(credentials) { ... }, function(err) { ... });\n   */\n\n  /**\n   * Resolves the provider chain by searching for the first set of\n   * credentials in {providers}.\n   *\n   * @callback callback function(err, credentials)\n   *   Called when the provider resolves the chain to a credentials object\n   *   or null if no credentials can be found.\n   *\n   *   @param err [Error] the error object returned if no credentials are\n   *     found.\n   *   @param credentials [AWS.Credentials] the credentials object resolved\n   *     by the provider chain.\n   * @return [AWS.CredentialProviderChain] the provider, for chaining.\n   */\n  resolve: function resolve(callback) {\n    var self = this;\n    if (self.providers.length === 0) {\n      callback(new Error('No providers'));\n      return self;\n    }\n\n    if (self.resolveCallbacks.push(callback) === 1) {\n      var index = 0;\n      var providers = self.providers.slice(0);\n\n      function resolveNext(err, creds) {\n        if ((!err && creds) || index === providers.length) {\n          AWS.util.arrayEach(self.resolveCallbacks, function (callback) {\n            callback(err, creds);\n          });\n          self.resolveCallbacks.length = 0;\n          return;\n        }\n\n        var provider = providers[index++];\n        if (typeof provider === 'function') {\n          creds = provider.call();\n        } else {\n          creds = provider;\n        }\n\n        if (creds.get) {\n          creds.get(function (getErr) {\n            resolveNext(getErr, getErr ? null : creds);\n          });\n        } else {\n          resolveNext(null, creds);\n        }\n      }\n\n      resolveNext();\n    }\n\n    return self;\n  }\n});\n\n/**\n * The default set of providers used by a vanilla CredentialProviderChain.\n *\n * In the browser:\n *\n * ```javascript\n * AWS.CredentialProviderChain.defaultProviders = []\n * ```\n *\n * In Node.js:\n *\n * ```javascript\n * AWS.CredentialProviderChain.defaultProviders = [\n *   function () { return new AWS.EnvironmentCredentials('AWS'); },\n *   function () { return new AWS.EnvironmentCredentials('AMAZON'); },\n *   function () { return new AWS.SsoCredentials(); },\n *   function () { return new AWS.SharedIniFileCredentials(); },\n *   function () { return new AWS.ECSCredentials(); },\n *   function () { return new AWS.ProcessCredentials(); },\n *   function () { return new AWS.TokenFileWebIdentityCredentials(); },\n *   function () { return new AWS.EC2MetadataCredentials() }\n * ]\n * ```\n */\nAWS.CredentialProviderChain.defaultProviders = [];\n\n/**\n * @api private\n */\nAWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);\n};\n\n/**\n * @api private\n */\nAWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.resolvePromise;\n};\n\nAWS.util.addPromises(AWS.CredentialProviderChain);\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,GAAG,CAACE,uBAAuB,GAAGF,GAAG,CAACG,IAAI,CAACC,OAAO,CAACJ,GAAG,CAACK,WAAW,EAAE;EAE9D;AACF;AACA;AACA;EACEC,WAAW,EAAE,SAASJ,uBAAuBA,CAACK,SAAS,EAAE;IACvD,IAAIA,SAAS,EAAE;MACb,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC5B,CAAC,MAAM;MACL,IAAI,CAACA,SAAS,GAAGP,GAAG,CAACE,uBAAuB,CAACM,gBAAgB,CAACC,KAAK,CAAC,CAAC,CAAC;IACxE;IACA,IAAI,CAACC,gBAAgB,GAAG,EAAE;EAC5B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO,EAAE,SAASA,OAAOA,CAACC,QAAQ,EAAE;IAClC,IAAIC,IAAI,GAAG,IAAI;IACf,IAAIA,IAAI,CAACN,SAAS,CAACO,MAAM,KAAK,CAAC,EAAE;MAC/BF,QAAQ,CAAC,IAAIG,KAAK,CAAC,cAAc,CAAC,CAAC;MACnC,OAAOF,IAAI;IACb;IAEA,IAAIA,IAAI,CAACH,gBAAgB,CAACM,IAAI,CAACJ,QAAQ,CAAC,KAAK,CAAC,EAAE;MAC9C,IAAIK,KAAK,GAAG,CAAC;MACb,IAAIV,SAAS,GAAGM,IAAI,CAACN,SAAS,CAACE,KAAK,CAAC,CAAC,CAAC;MAEvC,SAASS,WAAWA,CAACC,GAAG,EAAEC,KAAK,EAAE;QAC/B,IAAK,CAACD,GAAG,IAAIC,KAAK,IAAKH,KAAK,KAAKV,SAAS,CAACO,MAAM,EAAE;UACjDd,GAAG,CAACG,IAAI,CAACkB,SAAS,CAACR,IAAI,CAACH,gBAAgB,EAAE,UAAUE,QAAQ,EAAE;YAC5DA,QAAQ,CAACO,GAAG,EAAEC,KAAK,CAAC;UACtB,CAAC,CAAC;UACFP,IAAI,CAACH,gBAAgB,CAACI,MAAM,GAAG,CAAC;UAChC;QACF;QAEA,IAAIQ,QAAQ,GAAGf,SAAS,CAACU,KAAK,EAAE,CAAC;QACjC,IAAI,OAAOK,QAAQ,KAAK,UAAU,EAAE;UAClCF,KAAK,GAAGE,QAAQ,CAACC,IAAI,CAAC,CAAC;QACzB,CAAC,MAAM;UACLH,KAAK,GAAGE,QAAQ;QAClB;QAEA,IAAIF,KAAK,CAACI,GAAG,EAAE;UACbJ,KAAK,CAACI,GAAG,CAAC,UAAUC,MAAM,EAAE;YAC1BP,WAAW,CAACO,MAAM,EAAEA,MAAM,GAAG,IAAI,GAAGL,KAAK,CAAC;UAC5C,CAAC,CAAC;QACJ,CAAC,MAAM;UACLF,WAAW,CAAC,IAAI,EAAEE,KAAK,CAAC;QAC1B;MACF;MAEAF,WAAW,CAAC,CAAC;IACf;IAEA,OAAOL,IAAI;EACb;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,GAAG,CAACE,uBAAuB,CAACM,gBAAgB,GAAG,EAAE;;AAEjD;AACA;AACA;AACAR,GAAG,CAACE,uBAAuB,CAACwB,kBAAkB,GAAG,SAASA,kBAAkBA,CAACC,iBAAiB,EAAE;EAC9F,IAAI,CAACC,SAAS,CAACC,cAAc,GAAG7B,GAAG,CAACG,IAAI,CAAC2B,eAAe,CAAC,SAAS,EAAEH,iBAAiB,CAAC;AACxF,CAAC;;AAED;AACA;AACA;AACA3B,GAAG,CAACE,uBAAuB,CAAC6B,uBAAuB,GAAG,SAASA,uBAAuBA,CAAA,EAAG;EACvF,OAAO,IAAI,CAACH,SAAS,CAACC,cAAc;AACtC,CAAC;AAED7B,GAAG,CAACG,IAAI,CAAC6B,WAAW,CAAChC,GAAG,CAACE,uBAAuB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}