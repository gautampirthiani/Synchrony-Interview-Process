{"ast":null,"code":"var Hmac = require('./browserHmac');\nvar Md5 = require('./browserMd5');\nvar Sha1 = require('./browserSha1');\nvar Sha256 = require('./browserSha256');\n\n/**\n * @api private\n */\nmodule.exports = exports = {\n  createHash: function createHash(alg) {\n    alg = alg.toLowerCase();\n    if (alg === 'md5') {\n      return new Md5();\n    } else if (alg === 'sha256') {\n      return new Sha256();\n    } else if (alg === 'sha1') {\n      return new Sha1();\n    }\n    throw new Error('Hash algorithm ' + alg + ' is not supported in the browser SDK');\n  },\n  createHmac: function createHmac(alg, key) {\n    alg = alg.toLowerCase();\n    if (alg === 'md5') {\n      return new Hmac(Md5, key);\n    } else if (alg === 'sha256') {\n      return new Hmac(Sha256, key);\n    } else if (alg === 'sha1') {\n      return new Hmac(Sha1, key);\n    }\n    throw new Error('HMAC algorithm ' + alg + ' is not supported in the browser SDK');\n  },\n  createSign: function () {\n    throw new Error('createSign is not implemented in the browser');\n  }\n};","map":{"version":3,"names":["Hmac","require","Md5","Sha1","Sha256","module","exports","createHash","alg","toLowerCase","Error","createHmac","key","createSign"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/browserCryptoLib.js"],"sourcesContent":["var Hmac = require('./browserHmac');\nvar Md5 = require('./browserMd5');\nvar Sha1 = require('./browserSha1');\nvar Sha256 = require('./browserSha256');\n\n/**\n * @api private\n */\nmodule.exports = exports = {\n    createHash: function createHash(alg) {\n      alg = alg.toLowerCase();\n      if (alg === 'md5') {\n        return new Md5();\n      } else if (alg === 'sha256') {\n        return new Sha256();\n      } else if (alg === 'sha1') {\n        return new Sha1();\n      }\n\n      throw new Error('Hash algorithm ' + alg + ' is not supported in the browser SDK');\n    },\n    createHmac: function createHmac(alg, key) {\n      alg = alg.toLowerCase();\n      if (alg === 'md5') {\n        return new Hmac(Md5, key);\n      } else if (alg === 'sha256') {\n        return new Hmac(Sha256, key);\n      } else if (alg === 'sha1') {\n        return new Hmac(Sha1, key);\n      }\n\n      throw new Error('HMAC algorithm ' + alg + ' is not supported in the browser SDK');\n    },\n    createSign: function() {\n      throw new Error('createSign is not implemented in the browser');\n    }\n  };\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAe,CAAC;AACnC,IAAIC,GAAG,GAAGD,OAAO,CAAC,cAAc,CAAC;AACjC,IAAIE,IAAI,GAAGF,OAAO,CAAC,eAAe,CAAC;AACnC,IAAIG,MAAM,GAAGH,OAAO,CAAC,iBAAiB,CAAC;;AAEvC;AACA;AACA;AACAI,MAAM,CAACC,OAAO,GAAGA,OAAO,GAAG;EACvBC,UAAU,EAAE,SAASA,UAAUA,CAACC,GAAG,EAAE;IACnCA,GAAG,GAAGA,GAAG,CAACC,WAAW,CAAC,CAAC;IACvB,IAAID,GAAG,KAAK,KAAK,EAAE;MACjB,OAAO,IAAIN,GAAG,CAAC,CAAC;IAClB,CAAC,MAAM,IAAIM,GAAG,KAAK,QAAQ,EAAE;MAC3B,OAAO,IAAIJ,MAAM,CAAC,CAAC;IACrB,CAAC,MAAM,IAAII,GAAG,KAAK,MAAM,EAAE;MACzB,OAAO,IAAIL,IAAI,CAAC,CAAC;IACnB;IAEA,MAAM,IAAIO,KAAK,CAAC,iBAAiB,GAAGF,GAAG,GAAG,sCAAsC,CAAC;EACnF,CAAC;EACDG,UAAU,EAAE,SAASA,UAAUA,CAACH,GAAG,EAAEI,GAAG,EAAE;IACxCJ,GAAG,GAAGA,GAAG,CAACC,WAAW,CAAC,CAAC;IACvB,IAAID,GAAG,KAAK,KAAK,EAAE;MACjB,OAAO,IAAIR,IAAI,CAACE,GAAG,EAAEU,GAAG,CAAC;IAC3B,CAAC,MAAM,IAAIJ,GAAG,KAAK,QAAQ,EAAE;MAC3B,OAAO,IAAIR,IAAI,CAACI,MAAM,EAAEQ,GAAG,CAAC;IAC9B,CAAC,MAAM,IAAIJ,GAAG,KAAK,MAAM,EAAE;MACzB,OAAO,IAAIR,IAAI,CAACG,IAAI,EAAES,GAAG,CAAC;IAC5B;IAEA,MAAM,IAAIF,KAAK,CAAC,iBAAiB,GAAGF,GAAG,GAAG,sCAAsC,CAAC;EACnF,CAAC;EACDK,UAAU,EAAE,SAAAA,CAAA,EAAW;IACrB,MAAM,IAAIH,KAAK,CAAC,8CAA8C,CAAC;EACjE;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}