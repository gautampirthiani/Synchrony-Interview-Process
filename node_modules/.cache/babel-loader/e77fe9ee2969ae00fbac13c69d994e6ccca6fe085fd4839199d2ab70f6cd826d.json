{"ast":null,"code":"var AWS = require('../core');\nAWS.util.update(AWS.SQS.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('build', this.buildEndpoint);\n    if (request.service.config.computeChecksums) {\n      if (request.operation === 'sendMessage') {\n        request.addListener('extractData', this.verifySendMessageChecksum);\n      } else if (request.operation === 'sendMessageBatch') {\n        request.addListener('extractData', this.verifySendMessageBatchChecksum);\n      } else if (request.operation === 'receiveMessage') {\n        request.addListener('extractData', this.verifyReceiveMessageChecksum);\n      }\n    }\n  },\n  /**\n   * @api private\n   */\n  verifySendMessageChecksum: function verifySendMessageChecksum(response) {\n    if (!response.data) return;\n    var md5 = response.data.MD5OfMessageBody;\n    var body = this.params.MessageBody;\n    var calculatedMd5 = this.service.calculateChecksum(body);\n    if (calculatedMd5 !== md5) {\n      var msg = 'Got \"' + response.data.MD5OfMessageBody + '\", expecting \"' + calculatedMd5 + '\".';\n      this.service.throwInvalidChecksumError(response, [response.data.MessageId], msg);\n    }\n  },\n  /**\n   * @api private\n   */\n  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {\n    if (!response.data) return;\n    var service = this.service;\n    var entries = {};\n    var errors = [];\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Successful, function (entry) {\n      entries[entry.Id] = entry;\n    });\n    AWS.util.arrayEach(this.params.Entries, function (entry) {\n      if (entries[entry.Id]) {\n        var md5 = entries[entry.Id].MD5OfMessageBody;\n        var body = entry.MessageBody;\n        if (!service.isChecksumValid(md5, body)) {\n          errors.push(entry.Id);\n          messageIds.push(entries[entry.Id].MessageId);\n        }\n      }\n    });\n    if (errors.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds, 'Invalid messages: ' + errors.join(', '));\n    }\n  },\n  /**\n   * @api private\n   */\n  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {\n    if (!response.data) return;\n    var service = this.service;\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Messages, function (message) {\n      var md5 = message.MD5OfBody;\n      var body = message.Body;\n      if (!service.isChecksumValid(md5, body)) {\n        messageIds.push(message.MessageId);\n      }\n    });\n    if (messageIds.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds, 'Invalid messages: ' + messageIds.join(', '));\n    }\n  },\n  /**\n   * @api private\n   */\n  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {\n    response.error = AWS.util.error(new Error(), {\n      retryable: true,\n      code: 'InvalidChecksum',\n      messageIds: ids,\n      message: response.request.operation + ' returned an invalid MD5 response. ' + message\n    });\n  },\n  /**\n   * @api private\n   */\n  isChecksumValid: function isChecksumValid(checksum, data) {\n    return this.calculateChecksum(data) === checksum;\n  },\n  /**\n   * @api private\n   */\n  calculateChecksum: function calculateChecksum(data) {\n    return AWS.util.crypto.md5(data, 'hex');\n  },\n  /**\n   * @api private\n   */\n  buildEndpoint: function buildEndpoint(request) {\n    var url = request.httpRequest.params.QueueUrl;\n    if (url) {\n      request.httpRequest.endpoint = new AWS.Endpoint(url);\n\n      // signature version 4 requires the region name to be set,\n      // sqs queue urls contain the region name\n      var matches = request.httpRequest.endpoint.host.match(/^sqs\\.(.+?)\\./);\n      if (matches) request.httpRequest.region = matches[1];\n    }\n  }\n});","map":{"version":3,"names":["AWS","require","util","update","SQS","prototype","setupRequestListeners","request","addListener","buildEndpoint","service","config","computeChecksums","operation","verifySendMessageChecksum","verifySendMessageBatchChecksum","verifyReceiveMessageChecksum","response","data","md5","MD5OfMessageBody","body","params","MessageBody","calculatedMd5","calculateChecksum","msg","throwInvalidChecksumError","MessageId","entries","errors","messageIds","arrayEach","Successful","entry","Id","Entries","isChecksumValid","push","length","join","Messages","message","MD5OfBody","Body","ids","error","Error","retryable","code","checksum","crypto","url","httpRequest","QueueUrl","endpoint","Endpoint","matches","host","match","region"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/services/sqs.js"],"sourcesContent":["var AWS = require('../core');\n\nAWS.util.update(AWS.SQS.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('build', this.buildEndpoint);\n\n    if (request.service.config.computeChecksums) {\n      if (request.operation === 'sendMessage') {\n        request.addListener('extractData', this.verifySendMessageChecksum);\n      } else if (request.operation === 'sendMessageBatch') {\n        request.addListener('extractData', this.verifySendMessageBatchChecksum);\n      } else if (request.operation === 'receiveMessage') {\n        request.addListener('extractData', this.verifyReceiveMessageChecksum);\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageChecksum: function verifySendMessageChecksum(response) {\n    if (!response.data) return;\n\n    var md5 = response.data.MD5OfMessageBody;\n    var body = this.params.MessageBody;\n    var calculatedMd5 = this.service.calculateChecksum(body);\n    if (calculatedMd5 !== md5) {\n      var msg = 'Got \"' + response.data.MD5OfMessageBody +\n        '\", expecting \"' + calculatedMd5 + '\".';\n      this.service.throwInvalidChecksumError(response,\n        [response.data.MessageId], msg);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {\n    if (!response.data) return;\n\n    var service = this.service;\n    var entries = {};\n    var errors = [];\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Successful, function (entry) {\n      entries[entry.Id] = entry;\n    });\n    AWS.util.arrayEach(this.params.Entries, function (entry) {\n      if (entries[entry.Id]) {\n        var md5 = entries[entry.Id].MD5OfMessageBody;\n        var body = entry.MessageBody;\n        if (!service.isChecksumValid(md5, body)) {\n          errors.push(entry.Id);\n          messageIds.push(entries[entry.Id].MessageId);\n        }\n      }\n    });\n\n    if (errors.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds,\n        'Invalid messages: ' + errors.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {\n    if (!response.data) return;\n\n    var service = this.service;\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Messages, function(message) {\n      var md5 = message.MD5OfBody;\n      var body = message.Body;\n      if (!service.isChecksumValid(md5, body)) {\n        messageIds.push(message.MessageId);\n      }\n    });\n\n    if (messageIds.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds,\n        'Invalid messages: ' + messageIds.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {\n    response.error = AWS.util.error(new Error(), {\n      retryable: true,\n      code: 'InvalidChecksum',\n      messageIds: ids,\n      message: response.request.operation +\n               ' returned an invalid MD5 response. ' + message\n    });\n  },\n\n  /**\n   * @api private\n   */\n  isChecksumValid: function isChecksumValid(checksum, data) {\n    return this.calculateChecksum(data) === checksum;\n  },\n\n  /**\n   * @api private\n   */\n  calculateChecksum: function calculateChecksum(data) {\n    return AWS.util.crypto.md5(data, 'hex');\n  },\n\n  /**\n   * @api private\n   */\n  buildEndpoint: function buildEndpoint(request) {\n    var url = request.httpRequest.params.QueueUrl;\n    if (url) {\n      request.httpRequest.endpoint = new AWS.Endpoint(url);\n\n      // signature version 4 requires the region name to be set,\n      // sqs queue urls contain the region name\n      var matches = request.httpRequest.endpoint.host.match(/^sqs\\.(.+?)\\./);\n      if (matches) request.httpRequest.region = matches[1];\n    }\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}