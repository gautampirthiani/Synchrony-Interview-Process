{"ast":null,"code":"var util = require('../util');\nvar AWS = require('../core');\n\n/**\n * Prepend prefix defined by API model to endpoint that's already\n * constructed. This feature does not apply to operations using\n * endpoint discovery and can be disabled.\n * @api private\n */\nfunction populateHostPrefix(request) {\n  var enabled = request.service.config.hostPrefixEnabled;\n  if (!enabled) return request;\n  var operationModel = request.service.api.operations[request.operation];\n  //don't marshal host prefix when operation has endpoint discovery traits\n  if (hasEndpointDiscover(request)) return request;\n  if (operationModel.endpoint && operationModel.endpoint.hostPrefix) {\n    var hostPrefixNotation = operationModel.endpoint.hostPrefix;\n    var hostPrefix = expandHostPrefix(hostPrefixNotation, request.params, operationModel.input);\n    prependEndpointPrefix(request.httpRequest.endpoint, hostPrefix);\n    validateHostname(request.httpRequest.endpoint.hostname);\n  }\n  return request;\n}\n\n/**\n * @api private\n */\nfunction hasEndpointDiscover(request) {\n  var api = request.service.api;\n  var operationModel = api.operations[request.operation];\n  var isEndpointOperation = api.endpointOperation && api.endpointOperation === util.string.lowerFirst(operationModel.name);\n  return operationModel.endpointDiscoveryRequired !== 'NULL' || isEndpointOperation === true;\n}\n\n/**\n * @api private\n */\nfunction expandHostPrefix(hostPrefixNotation, params, shape) {\n  util.each(shape.members, function (name, member) {\n    if (member.hostLabel === true) {\n      if (typeof params[name] !== 'string' || params[name] === '') {\n        throw util.error(new Error(), {\n          message: 'Parameter ' + name + ' should be a non-empty string.',\n          code: 'InvalidParameter'\n        });\n      }\n      var regex = new RegExp('\\\\{' + name + '\\\\}', 'g');\n      hostPrefixNotation = hostPrefixNotation.replace(regex, params[name]);\n    }\n  });\n  return hostPrefixNotation;\n}\n\n/**\n * @api private\n */\nfunction prependEndpointPrefix(endpoint, prefix) {\n  if (endpoint.host) {\n    endpoint.host = prefix + endpoint.host;\n  }\n  if (endpoint.hostname) {\n    endpoint.hostname = prefix + endpoint.hostname;\n  }\n}\n\n/**\n * @api private\n */\nfunction validateHostname(hostname) {\n  var labels = hostname.split('.');\n  //Reference: https://tools.ietf.org/html/rfc1123#section-2\n  var hostPattern = /^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9]$/;\n  util.arrayEach(labels, function (label) {\n    if (!label.length || label.length < 1 || label.length > 63) {\n      throw util.error(new Error(), {\n        code: 'ValidationError',\n        message: 'Hostname label length should be between 1 to 63 characters, inclusive.'\n      });\n    }\n    if (!hostPattern.test(label)) {\n      throw AWS.util.error(new Error(), {\n        code: 'ValidationError',\n        message: label + ' is not hostname compatible.'\n      });\n    }\n  });\n}\nmodule.exports = {\n  populateHostPrefix: populateHostPrefix\n};","map":{"version":3,"names":["util","require","AWS","populateHostPrefix","request","enabled","service","config","hostPrefixEnabled","operationModel","api","operations","operation","hasEndpointDiscover","endpoint","hostPrefix","hostPrefixNotation","expandHostPrefix","params","input","prependEndpointPrefix","httpRequest","validateHostname","hostname","isEndpointOperation","endpointOperation","string","lowerFirst","name","endpointDiscoveryRequired","shape","each","members","member","hostLabel","error","Error","message","code","regex","RegExp","replace","prefix","host","labels","split","hostPattern","arrayEach","label","length","test","module","exports"],"sources":["/Users/damianmiskow/Desktop/Projects/Synchrony-Interview-Process/node_modules/aws-sdk/lib/protocol/helpers.js"],"sourcesContent":["var util =  require('../util');\nvar AWS = require('../core');\n\n/**\n * Prepend prefix defined by API model to endpoint that's already\n * constructed. This feature does not apply to operations using\n * endpoint discovery and can be disabled.\n * @api private\n */\nfunction populateHostPrefix(request)  {\n  var enabled = request.service.config.hostPrefixEnabled;\n  if (!enabled) return request;\n  var operationModel = request.service.api.operations[request.operation];\n  //don't marshal host prefix when operation has endpoint discovery traits\n  if (hasEndpointDiscover(request)) return request;\n  if (operationModel.endpoint && operationModel.endpoint.hostPrefix) {\n    var hostPrefixNotation = operationModel.endpoint.hostPrefix;\n    var hostPrefix = expandHostPrefix(hostPrefixNotation, request.params, operationModel.input);\n    prependEndpointPrefix(request.httpRequest.endpoint, hostPrefix);\n    validateHostname(request.httpRequest.endpoint.hostname);\n  }\n  return request;\n}\n\n/**\n * @api private\n */\nfunction hasEndpointDiscover(request) {\n  var api = request.service.api;\n  var operationModel = api.operations[request.operation];\n  var isEndpointOperation = api.endpointOperation && (api.endpointOperation === util.string.lowerFirst(operationModel.name));\n  return (operationModel.endpointDiscoveryRequired !== 'NULL' || isEndpointOperation === true);\n}\n\n/**\n * @api private\n */\nfunction expandHostPrefix(hostPrefixNotation, params, shape) {\n  util.each(shape.members, function(name, member) {\n    if (member.hostLabel === true) {\n      if (typeof params[name] !== 'string' || params[name] === '') {\n        throw util.error(new Error(), {\n          message: 'Parameter ' + name + ' should be a non-empty string.',\n          code: 'InvalidParameter'\n        });\n      }\n      var regex = new RegExp('\\\\{' + name + '\\\\}', 'g');\n      hostPrefixNotation = hostPrefixNotation.replace(regex, params[name]);\n    }\n  });\n  return hostPrefixNotation;\n}\n\n/**\n * @api private\n */\nfunction prependEndpointPrefix(endpoint, prefix) {\n  if (endpoint.host) {\n    endpoint.host = prefix + endpoint.host;\n  }\n  if (endpoint.hostname) {\n    endpoint.hostname = prefix + endpoint.hostname;\n  }\n}\n\n/**\n * @api private\n */\nfunction validateHostname(hostname) {\n  var labels = hostname.split('.');\n  //Reference: https://tools.ietf.org/html/rfc1123#section-2\n  var hostPattern = /^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9]$/;\n  util.arrayEach(labels, function(label) {\n    if (!label.length || label.length < 1 || label.length > 63) {\n      throw util.error(new Error(), {\n        code: 'ValidationError',\n        message: 'Hostname label length should be between 1 to 63 characters, inclusive.'\n      });\n    }\n    if (!hostPattern.test(label)) {\n      throw AWS.util.error(new Error(),\n        {code: 'ValidationError', message: label + ' is not hostname compatible.'});\n    }\n  });\n}\n\nmodule.exports = {\n  populateHostPrefix: populateHostPrefix\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}